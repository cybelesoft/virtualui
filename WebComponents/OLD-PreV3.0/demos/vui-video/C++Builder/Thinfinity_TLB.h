// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 7/20/2016 8:44:43 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Source\AppBridge\bin64\Thinfinity.VirtualUI.dll (1)
// LIBID: {602E7D48-65C8-4FF0-B8C9-0B5D6444C0DD}
// LCID: 0
// Helpfile: 
// HelpString: Thinfinity VirtualUI SDK
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   Thinfinity_TLBH
#define   Thinfinity_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Thinfinity_tlb
{

// *********************************************************************//
// HelpString: Thinfinity VirtualUI SDK
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_Thinfinity;
extern __declspec (package) const GUID IID_IVirtualUI;
extern __declspec (package) const GUID DIID_IEvents;
extern __declspec (package) const GUID CLSID_VirtualUI;
extern __declspec (package) const GUID IID_IBrowserInfo;
extern __declspec (package) const GUID CLSID_BrowserInfo;
extern __declspec (package) const GUID IID_IDevServer;
extern __declspec (package) const GUID CLSID_DevServer;
extern __declspec (package) const GUID IID_IClientSettings;
extern __declspec (package) const GUID CLSID_ClientSettings;
extern __declspec (package) const GUID IID_IJSValue;
extern __declspec (package) const GUID CLSID_JSValue;
extern __declspec (package) const GUID IID_IJSNamedValue;
extern __declspec (package) const GUID CLSID_JSNamedValue;
extern __declspec (package) const GUID IID_IJSObject;
extern __declspec (package) const GUID DIID_IJSObjectEvents;
extern __declspec (package) const GUID CLSID_JSObject;
extern __declspec (package) const GUID IID_IJSObjects;
extern __declspec (package) const GUID CLSID_JSObjects;
extern __declspec (package) const GUID IID_IJSProperty;
extern __declspec (package) const GUID CLSID_JSProperty;
extern __declspec (package) const GUID IID_IJSProperties;
extern __declspec (package) const GUID CLSID_JSProperties;
extern __declspec (package) const GUID IID_IJSArgument;
extern __declspec (package) const GUID CLSID_JSArgument;
extern __declspec (package) const GUID IID_IJSArguments;
extern __declspec (package) const GUID CLSID_JSArguments;
extern __declspec (package) const GUID IID_IJSMethod;
extern __declspec (package) const GUID CLSID_JSMethod;
extern __declspec (package) const GUID IID_IJSMethods;
extern __declspec (package) const GUID CLSID_JSMethods;
extern __declspec (package) const GUID IID_IJSEvent;
extern __declspec (package) const GUID CLSID_JSEvent;
extern __declspec (package) const GUID IID_IJSEvents;
extern __declspec (package) const GUID CLSID_JSEvents;
extern __declspec (package) const GUID IID_IJSBinding;
extern __declspec (package) const GUID IID_IJSCallback;
extern __declspec (package) const GUID IID_IRecorder;
extern __declspec (package) const GUID CLSID_Recorder;
extern __declspec (package) const GUID IID_IRecTrack;
extern __declspec (package) const GUID CLSID_RecTrack;
extern __declspec (package) const GUID IID_IRecTracks;
extern __declspec (package) const GUID CLSID_RecTracks;
extern __declspec (package) const GUID IID_IFileSystemFilter;
extern __declspec (package) const GUID CLSID_FileSystemFilter;
extern __declspec (package) const GUID IID_IRegistryFilter;
extern __declspec (package) const GUID CLSID_RegistryFilter;
extern __declspec (package) const GUID GUID_IJSDataType;
extern __declspec (package) const GUID GUID_Orientation;
extern __declspec (package) const GUID GUID_MouseMoveGestureStyle;
extern __declspec (package) const GUID GUID_MouseMoveGestureAction;
extern __declspec (package) const GUID GUID_RecorderState;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    IJSDataType;
enum class    Orientation;
enum class    MouseMoveGestureStyle;
enum class    MouseMoveGestureAction;
enum class    RecorderState;
interface DECLSPEC_UUID("{4B85F81B-72A2-4FCD-9A6B-9CAC24B7A511}") IVirtualUI;
typedef TComInterface<IVirtualUI, &IID_IVirtualUI> IVirtualUIPtr;

interface DECLSPEC_UUID("{1C5700BC-2317-4062-B614-0A4E286CFE68}") IEvents;
typedef TComInterface<IEvents, &DIID_IEvents> IEventsPtr;

interface DECLSPEC_UUID("{4D9F5347-460B-4275-BDF2-F2738E7F6757}") IBrowserInfo;
typedef TComInterface<IBrowserInfo, &IID_IBrowserInfo> IBrowserInfoPtr;

interface DECLSPEC_UUID("{B3EAC0CA-D7AB-4AB1-9E24-84A63C8C3F80}") IDevServer;
typedef TComInterface<IDevServer, &IID_IDevServer> IDevServerPtr;

interface DECLSPEC_UUID("{439624CA-ED33-47BE-9211-91290F29584A}") IClientSettings;
typedef TComInterface<IClientSettings, &IID_IClientSettings> IClientSettingsPtr;

interface DECLSPEC_UUID("{6DE2E6A0-3C3A-47DC-9A93-928135EDAC90}") IJSValue;
typedef TComInterface<IJSValue, &IID_IJSValue> IJSValuePtr;

interface DECLSPEC_UUID("{E492419B-00AC-4A91-9AE9-9A82B07E89AE}") IJSNamedValue;
typedef TComInterface<IJSNamedValue, &IID_IJSNamedValue> IJSNamedValuePtr;

interface DECLSPEC_UUID("{59342310-79A7-4B14-8B63-6DF05609AE30}") IJSObject;
typedef TComInterface<IJSObject, &IID_IJSObject> IJSObjectPtr;

interface DECLSPEC_UUID("{A3D640E8-CD18-4196-A1A2-C87C82B0F88B}") IJSObjectEvents;
typedef TComInterface<IJSObjectEvents, &DIID_IJSObjectEvents> IJSObjectEventsPtr;

interface DECLSPEC_UUID("{C2406011-568E-4EAC-B95C-EF29E4806B86}") IJSObjects;
typedef TComInterface<IJSObjects, &IID_IJSObjects> IJSObjectsPtr;

interface DECLSPEC_UUID("{1F95C0E9-E7BF-48C9-AA35-88AD0149109B}") IJSProperty;
typedef TComInterface<IJSProperty, &IID_IJSProperty> IJSPropertyPtr;

interface DECLSPEC_UUID("{FCBB688F-8FB2-42C1-86FC-0AAF3B2A500C}") IJSProperties;
typedef TComInterface<IJSProperties, &IID_IJSProperties> IJSPropertiesPtr;

interface DECLSPEC_UUID("{8F8C4462-D7B5-4696-BAD5-16DFAA6E2601}") IJSArgument;
typedef TComInterface<IJSArgument, &IID_IJSArgument> IJSArgumentPtr;

interface DECLSPEC_UUID("{FC097EF5-6D8A-4C80-A2AD-382FDC75E901}") IJSArguments;
typedef TComInterface<IJSArguments, &IID_IJSArguments> IJSArgumentsPtr;

interface DECLSPEC_UUID("{C45D6A8F-AD4A-47BB-AC3A-C125D6D5D27E}") IJSMethod;
typedef TComInterface<IJSMethod, &IID_IJSMethod> IJSMethodPtr;

interface DECLSPEC_UUID("{E4CB461F-586E-4121-ABD7-345B87BC423A}") IJSMethods;
typedef TComInterface<IJSMethods, &IID_IJSMethods> IJSMethodsPtr;

interface DECLSPEC_UUID("{8B66EACD-9619-43CF-9196-DCDA17F5500E}") IJSEvent;
typedef TComInterface<IJSEvent, &IID_IJSEvent> IJSEventPtr;

interface DECLSPEC_UUID("{6AE952B3-B6DA-4C81-80FF-D0A162E11D02}") IJSEvents;
typedef TComInterface<IJSEvents, &IID_IJSEvents> IJSEventsPtr;

interface DECLSPEC_UUID("{ACFC2953-37F1-479E-B405-D0BB75E156E6}") IJSBinding;
typedef TComInterface<IJSBinding, &IID_IJSBinding> IJSBindingPtr;

interface DECLSPEC_UUID("{ADD570A0-491A-4E40-8120-57B4D1245FD3}") IJSCallback;
typedef TComInterface<IJSCallback, &IID_IJSCallback> IJSCallbackPtr;

interface DECLSPEC_UUID("{D89DA2B6-B7BF-4065-80F5-6D78B331C7DD}") IRecorder;
typedef TComInterface<IRecorder, &IID_IRecorder> IRecorderPtr;

interface DECLSPEC_UUID("{D4744AE1-70CB-43DD-BEA5-A5310B2E24C6}") IRecTrack;
typedef TComInterface<IRecTrack, &IID_IRecTrack> IRecTrackPtr;

interface DECLSPEC_UUID("{AB45B615-9309-471E-A455-3FE93F88E674}") IRecTracks;
typedef TComInterface<IRecTracks, &IID_IRecTracks> IRecTracksPtr;

interface DECLSPEC_UUID("{3FE99D2F-0CFC-43D1-B762-0C7C15EB872E}") IFileSystemFilter;
typedef TComInterface<IFileSystemFilter, &IID_IFileSystemFilter> IFileSystemFilterPtr;

interface DECLSPEC_UUID("{4834F840-915B-488B-ADEA-98890A04CEE6}") IRegistryFilter;
typedef TComInterface<IRegistryFilter, &IID_IRegistryFilter> IRegistryFilterPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IVirtualUI VirtualUI;
typedef IVirtualUIPtr VirtualUIPtr;
typedef IBrowserInfo BrowserInfo;
typedef IBrowserInfoPtr BrowserInfoPtr;
typedef IDevServer DevServer;
typedef IDevServerPtr DevServerPtr;
typedef IClientSettings ClientSettings;
typedef IClientSettingsPtr ClientSettingsPtr;
typedef IJSValue JSValue;
typedef IJSValuePtr JSValuePtr;
typedef IJSNamedValue JSNamedValue;
typedef IJSNamedValuePtr JSNamedValuePtr;
typedef IJSObject JSObject;
typedef IJSObjectPtr JSObjectPtr;
typedef IJSObjects JSObjects;
typedef IJSObjectsPtr JSObjectsPtr;
typedef IJSProperty JSProperty;
typedef IJSPropertyPtr JSPropertyPtr;
typedef IJSProperties JSProperties;
typedef IJSPropertiesPtr JSPropertiesPtr;
typedef IJSArgument JSArgument;
typedef IJSArgumentPtr JSArgumentPtr;
typedef IJSArguments JSArguments;
typedef IJSArgumentsPtr JSArgumentsPtr;
typedef IJSMethod JSMethod;
typedef IJSMethodPtr JSMethodPtr;
typedef IJSMethods JSMethods;
typedef IJSMethodsPtr JSMethodsPtr;
typedef IJSEvent JSEvent;
typedef IJSEventPtr JSEventPtr;
typedef IJSEvents JSEvents;
typedef IJSEventsPtr JSEventsPtr;
typedef IRecorder Recorder;
typedef IRecorderPtr RecorderPtr;
typedef IRecTrack RecTrack;
typedef IRecTrackPtr RecTrackPtr;
typedef IRecTracks RecTracks;
typedef IRecTracksPtr RecTracksPtr;
typedef IFileSystemFilter FileSystemFilter;
typedef IFileSystemFilterPtr FileSystemFilterPtr;
typedef IRegistryFilter RegistryFilter;
typedef IRegistryFilterPtr RegistryFilterPtr;

#define LIBID_OF_VirtualUI (&LIBID_Thinfinity)
#define LIBID_OF_BrowserInfo (&LIBID_Thinfinity)
#define LIBID_OF_DevServer (&LIBID_Thinfinity)
#define LIBID_OF_ClientSettings (&LIBID_Thinfinity)
#define LIBID_OF_JSValue (&LIBID_Thinfinity)
#define LIBID_OF_JSNamedValue (&LIBID_Thinfinity)
#define LIBID_OF_JSObject (&LIBID_Thinfinity)
#define LIBID_OF_JSObjects (&LIBID_Thinfinity)
#define LIBID_OF_JSProperty (&LIBID_Thinfinity)
#define LIBID_OF_JSProperties (&LIBID_Thinfinity)
#define LIBID_OF_JSArgument (&LIBID_Thinfinity)
#define LIBID_OF_JSArguments (&LIBID_Thinfinity)
#define LIBID_OF_JSMethod (&LIBID_Thinfinity)
#define LIBID_OF_JSMethods (&LIBID_Thinfinity)
#define LIBID_OF_JSEvent (&LIBID_Thinfinity)
#define LIBID_OF_JSEvents (&LIBID_Thinfinity)
#define LIBID_OF_Recorder (&LIBID_Thinfinity)
#define LIBID_OF_RecTrack (&LIBID_Thinfinity)
#define LIBID_OF_RecTracks (&LIBID_Thinfinity)
#define LIBID_OF_FileSystemFilter (&LIBID_Thinfinity)
#define LIBID_OF_RegistryFilter (&LIBID_Thinfinity)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class IJSDataType
{
  JSDT_NULL = 0, 
  JSDT_STRING = 1, 
  JSDT_INT = 2, 
  JSDT_BOOL = 3, 
  JSDT_FLOAT = 4, 
  JSDT_JSON = 5
};

enum class Orientation
{
  PORTRAIT = 0, 
  LANDSCAPE = 1
};

enum class MouseMoveGestureStyle
{
  MM_STYLE_RELATIVE = 0, 
  MM_STYLE_ABSOLUTE = 1
};

enum class MouseMoveGestureAction
{
  MM_ACTION_MOVE = 0, 
  MM_ACTION_WHEEL = 1
};

enum class RecorderState
{
  Inactive = 0, 
  Recording = 1, 
  Playing = 2
};

// *********************************************************************//
// Interface: IVirtualUI
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B85F81B-72A2-4FCD-9A6B-9CAC24B7A511}
// *********************************************************************//
interface IVirtualUI  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Start(long Timeout/*[in]*/, 
                                          VARIANT_BOOL* OutRetVal/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_DevMode(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_DevMode(VARIANT_BOOL Value/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_StdDialogs(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_StdDialogs(VARIANT_BOOL Value/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_BrowserInfo(Thinfinity_tlb::IBrowserInfo** Value/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_DevServer(Thinfinity_tlb::IDevServer** Value/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_ClientSettings(Thinfinity_tlb::IClientSettings** Value/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE DownloadFile(BSTR LocalFilename/*[in]*/, 
                                                 BSTR RemoteFilename/*[in]*/, BSTR MimeType/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE PrintPdf(BSTR AFileName/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE OpenLinkDlg(BSTR url/*[in]*/, BSTR caption/*[in]*/) = 0; // [114]
  virtual HRESULT STDMETHODCALLTYPE SendMessage(BSTR Data/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE AllowExecute(BSTR Filename/*[in]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE SetImageQualityByWnd(long Wnd/*[in]*/, BSTR Class/*[in]*/, 
                                                         long Quality/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE UploadFile(BSTR ServerDirectory/*[in]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/, 
                                                   VARIANT_BOOL* OutRetVal/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE ShowVirtualKeyboard(void) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_Recorder(Thinfinity_tlb::IRecorder** Value/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE PreviewPdf(BSTR AFileName/*[in]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_FileSystemFilter(Thinfinity_tlb::IFileSystemFilter** Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_RegistryFilter(Thinfinity_tlb::IRegistryFilter** Value/*[out,retval]*/) = 0; // [202]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall Start(long Timeout/*[in]*/)
  {
    VARIANT_BOOL OutRetVal;
    OLECHECK(this->Start(Timeout, (VARIANT_BOOL*)&OutRetVal));
    return OutRetVal;
  }

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DevMode(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DevMode((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_StdDialogs(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_StdDialogs((VARIANT_BOOL*)&Value));
    return Value;
  }

  Thinfinity_tlb::IBrowserInfoPtr __fastcall get_BrowserInfo(void)
  {
    Thinfinity_tlb::IBrowserInfoPtr Value;
    OLECHECK(this->get_BrowserInfo(&Value));
    return Value;
  }

  Thinfinity_tlb::IDevServerPtr __fastcall get_DevServer(void)
  {
    Thinfinity_tlb::IDevServerPtr Value;
    OLECHECK(this->get_DevServer(&Value));
    return Value;
  }

  Thinfinity_tlb::IClientSettingsPtr __fastcall get_ClientSettings(void)
  {
    Thinfinity_tlb::IClientSettingsPtr Value;
    OLECHECK(this->get_ClientSettings(&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/)
  {
    VARIANT_BOOL OutRetVal;
    OLECHECK(this->TakeScreenshot(Wnd, Filename, (VARIANT_BOOL*)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IRecorderPtr __fastcall get_Recorder(void)
  {
    Thinfinity_tlb::IRecorderPtr Value;
    OLECHECK(this->get_Recorder(&Value));
    return Value;
  }

  Thinfinity_tlb::IFileSystemFilterPtr __fastcall get_FileSystemFilter(void)
  {
    Thinfinity_tlb::IFileSystemFilterPtr Value;
    OLECHECK(this->get_FileSystemFilter(&Value));
    return Value;
  }

  Thinfinity_tlb::IRegistryFilterPtr __fastcall get_RegistryFilter(void)
  {
    Thinfinity_tlb::IRegistryFilterPtr Value;
    OLECHECK(this->get_RegistryFilter(&Value));
    return Value;
  }


  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    DevMode = {read = get_DevMode, write = set_DevMode};
  __property   VARIANT_BOOL    StdDialogs = {read = get_StdDialogs, write = set_StdDialogs};
  __property   Thinfinity_tlb::IBrowserInfoPtr BrowserInfo = {read = get_BrowserInfo};
  __property   Thinfinity_tlb::IDevServerPtr DevServer = {read = get_DevServer};
  __property   Thinfinity_tlb::IClientSettingsPtr ClientSettings = {read = get_ClientSettings};
  __property   Thinfinity_tlb::IRecorderPtr Recorder = {read = get_Recorder};
  __property   Thinfinity_tlb::IFileSystemFilterPtr FileSystemFilter = {read = get_FileSystemFilter};
  __property   Thinfinity_tlb::IRegistryFilterPtr RegistryFilter = {read = get_RegistryFilter};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IEvents
// Flags:     (4096) Dispatchable
// GUID:      {1C5700BC-2317-4062-B614-0A4E286CFE68}
// *********************************************************************//
interface IEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnGetUploadDir(BSTR* Directory/*[in,out]*/, VARIANT_BOOL* Handled/*[in,out]*/)
  {
    _TDispID _dispid(/* OnGetUploadDir */ DISPID(101));
    TAutoArgs<2> _args;
    _args[1] = Directory /*[VT_BSTR:1]*/;
    _args[2] = Handled /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnBrowserResize(long* Width/*[in,out]*/, long* Height/*[in,out]*/, 
                                  VARIANT_BOOL* ResizeMaximized/*[in,out]*/)
  {
    _TDispID _dispid(/* OnBrowserResize */ DISPID(102));
    TAutoArgs<3> _args;
    _args[1] = Width /*[VT_I4:1]*/;
    _args[2] = Height /*[VT_I4:1]*/;
    _args[3] = ResizeMaximized /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnClose()
  {
    _TDispID _dispid(/* OnClose */ DISPID(103));
    OleProcedure(_dispid);
  }

  void __fastcall OnReceiveMessage(BSTR Data/*[in]*/)
  {
    _TDispID _dispid(/* OnReceiveMessage */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = Data /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDownloadEnd(BSTR Filename/*[in]*/)
  {
    _TDispID _dispid(/* OnDownloadEnd */ DISPID(105));
    TAutoArgs<1> _args;
    _args[1] = Filename /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  HRESULT __fastcall OnRecorderChanged()
  {
    _TDispID _dispid(/* OnRecorderChanged */ DISPID(106));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IBrowserInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D9F5347-460B-4275-BDF2-F2738E7F6757}
// *********************************************************************//
interface IBrowserInfo  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ViewWidth(long* Value/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ViewWidth(long Value/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_ViewHeight(long* Value/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_ViewHeight(long Value/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_BrowserWidth(long* Value/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_BrowserHeight(long* Value/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenWidth(long* Value/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenHeight(long* Value/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Username(BSTR* Value/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_IPAddress(BSTR* Value/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_UserAgent(BSTR* Value/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_ScreenResolution(long* Value/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Thinfinity_tlb::Orientation* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_UniqueBrowserId(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE GetCookie(BSTR Name/*[in]*/, BSTR* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE SetCookie(BSTR Name/*[in]*/, BSTR Value/*[in]*/, 
                                              BSTR Expires/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_Location(BSTR* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_CustomData(BSTR* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_CustomData(BSTR Value/*[in]*/) = 0; // [206]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ViewWidth(void)
  {
    long Value;
    OLECHECK(this->get_ViewWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_ViewHeight(void)
  {
    long Value;
    OLECHECK(this->get_ViewHeight((long*)&Value));
    return Value;
  }

  long __fastcall get_BrowserWidth(void)
  {
    long Value;
    OLECHECK(this->get_BrowserWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_BrowserHeight(void)
  {
    long Value;
    OLECHECK(this->get_BrowserHeight((long*)&Value));
    return Value;
  }

  long __fastcall get_ScreenWidth(void)
  {
    long Value;
    OLECHECK(this->get_ScreenWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_ScreenHeight(void)
  {
    long Value;
    OLECHECK(this->get_ScreenHeight((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Username(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Username((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_IPAddress(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_IPAddress((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_UserAgent(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_UserAgent((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_ScreenResolution(void)
  {
    long Value;
    OLECHECK(this->get_ScreenResolution((long*)&Value));
    return Value;
  }

  Thinfinity_tlb::Orientation __fastcall get_Orientation(void)
  {
    Thinfinity_tlb::Orientation Value;
    OLECHECK(this->get_Orientation((Thinfinity_tlb::Orientation*)&Value));
    return Value;
  }

  BSTR __fastcall get_UniqueBrowserId(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_UniqueBrowserId((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall GetCookie(BSTR Name/*[in]*/)
  {
    BSTR Value = 0;
    OLECHECK(this->GetCookie(Name, (BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_Location(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Location((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_CustomData(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_CustomData((BSTR*)&Value));
    return Value;
  }


  __property   long            ViewWidth = {read = get_ViewWidth, write = set_ViewWidth};
  __property   long            ViewHeight = {read = get_ViewHeight, write = set_ViewHeight};
  __property   long            BrowserWidth = {read = get_BrowserWidth};
  __property   long            BrowserHeight = {read = get_BrowserHeight};
  __property   long            ScreenWidth = {read = get_ScreenWidth};
  __property   long            ScreenHeight = {read = get_ScreenHeight};
  __property   BSTR            Username = {read = get_Username};
  __property   BSTR            IPAddress = {read = get_IPAddress};
  __property   BSTR            UserAgent = {read = get_UserAgent};
  __property   long            ScreenResolution = {read = get_ScreenResolution};
  __property   Thinfinity_tlb::Orientation Orientation = {read = get_Orientation};
  __property   BSTR            UniqueBrowserId = {read = get_UniqueBrowserId};
  __property   BSTR            Location = {read = get_Location};
  __property   BSTR            CustomData = {read = get_CustomData, write = set_CustomData};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IDevServer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3EAC0CA-D7AB-4AB1-9E24-84A63C8C3F80}
// *********************************************************************//
interface IDevServer  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Port(long* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_Port(long Value/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_StartBrowser(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_StartBrowser(VARIANT_BOOL Value/*[in]*/) = 0; // [203]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_Port(void)
  {
    long Value;
    OLECHECK(this->get_Port((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_StartBrowser(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_StartBrowser((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            Port = {read = get_Port, write = set_Port};
  __property   VARIANT_BOOL    StartBrowser = {read = get_StartBrowser, write = set_StartBrowser};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IClientSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {439624CA-ED33-47BE-9211-91290F29584A}
// *********************************************************************//
interface IClientSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction Value/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_CursorVisible(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_CursorVisible(VARIANT_BOOL Value/*[in]*/) = 0; // [203]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Thinfinity_tlb::MouseMoveGestureStyle __fastcall get_MouseMoveGestureStyle(void)
  {
    Thinfinity_tlb::MouseMoveGestureStyle Value;
    OLECHECK(this->get_MouseMoveGestureStyle((Thinfinity_tlb::MouseMoveGestureStyle*)&Value));
    return Value;
  }

  Thinfinity_tlb::MouseMoveGestureAction __fastcall get_MouseMoveGestureAction(void)
  {
    Thinfinity_tlb::MouseMoveGestureAction Value;
    OLECHECK(this->get_MouseMoveGestureAction((Thinfinity_tlb::MouseMoveGestureAction*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_CursorVisible(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_CursorVisible((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   Thinfinity_tlb::MouseMoveGestureStyle MouseMoveGestureStyle = {read = get_MouseMoveGestureStyle, write = set_MouseMoveGestureStyle};
  __property   Thinfinity_tlb::MouseMoveGestureAction MouseMoveGestureAction = {read = get_MouseMoveGestureAction, write = set_MouseMoveGestureAction};
  __property   VARIANT_BOOL    CursorVisible = {read = get_CursorVisible, write = set_CursorVisible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6DE2E6A0-3C3A-47DC-9A93-928135EDAC90}
// *********************************************************************//
interface IJSValue  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_RawValue(VARIANT* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_RawValue(VARIANT Value/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_AsString(BSTR* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_AsString(BSTR Value/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_AsInt(long* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE set_AsInt(long Value/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_AsBool(VARIANT_BOOL Value/*[in]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_AsFloat(float* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_AsFloat(float Value/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_AsJSON(BSTR* Value/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE set_AsJSON(BSTR Value/*[in]*/) = 0; // [207]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Thinfinity_tlb::IJSDataType __fastcall get_DataType(void)
  {
    Thinfinity_tlb::IJSDataType Value;
    OLECHECK(this->get_DataType((Thinfinity_tlb::IJSDataType*)&Value));
    return Value;
  }

  VARIANT __fastcall get_RawValue(void)
  {
    VARIANT Value;
    OLECHECK(this->get_RawValue((VARIANT*)&Value));
    return Value;
  }

  BSTR __fastcall get_AsString(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_AsString((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_AsInt(void)
  {
    long Value;
    OLECHECK(this->get_AsInt((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AsBool(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AsBool((VARIANT_BOOL*)&Value));
    return Value;
  }

  float __fastcall get_AsFloat(void)
  {
    float Value;
    OLECHECK(this->get_AsFloat((float*)&Value));
    return Value;
  }

  BSTR __fastcall get_AsJSON(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_AsJSON((BSTR*)&Value));
    return Value;
  }


  __property   Thinfinity_tlb::IJSDataType DataType = {read = get_DataType, write = set_DataType};
  __property   BSTR            AsString = {read = get_AsString, write = set_AsString};
  __property   long            AsInt = {read = get_AsInt, write = set_AsInt};
  __property   VARIANT_BOOL    AsBool = {read = get_AsBool, write = set_AsBool};
  __property   float           AsFloat = {read = get_AsFloat, write = set_AsFloat};
  __property   BSTR            AsJSON = {read = get_AsJSON, write = set_AsJSON};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSNamedValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E492419B-00AC-4A91-9AE9-9A82B07E89AE}
// *********************************************************************//
interface IJSNamedValue  : public Thinfinity_tlb::IJSValue
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Value/*[out,retval]*/) = 0; // [301]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Value/*[in]*/) = 0; // [301]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Name((BSTR*)&Value));
    return Value;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59342310-79A7-4B14-8B63-6DF05609AE30}
// *********************************************************************//
interface IJSObject  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Id(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_Id(BSTR Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Thinfinity_tlb::IJSProperties** Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_Methods(Thinfinity_tlb::IJSMethods** Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_Events(Thinfinity_tlb::IJSEvents** Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_Objects(Thinfinity_tlb::IJSObjects** Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE FireEvent(BSTR Name/*[in]*/, 
                                              Thinfinity_tlb::IJSArguments* Arguments/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE ApplyChanges(void) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE ApplyModel(void) = 0; // [208]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Id(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Id((BSTR*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSPropertiesPtr __fastcall get_Properties(void)
  {
    Thinfinity_tlb::IJSPropertiesPtr Value;
    OLECHECK(this->get_Properties(&Value));
    return Value;
  }

  Thinfinity_tlb::IJSMethodsPtr __fastcall get_Methods(void)
  {
    Thinfinity_tlb::IJSMethodsPtr Value;
    OLECHECK(this->get_Methods(&Value));
    return Value;
  }

  Thinfinity_tlb::IJSEventsPtr __fastcall get_Events(void)
  {
    Thinfinity_tlb::IJSEventsPtr Value;
    OLECHECK(this->get_Events(&Value));
    return Value;
  }

  Thinfinity_tlb::IJSObjectsPtr __fastcall get_Objects(void)
  {
    Thinfinity_tlb::IJSObjectsPtr Value;
    OLECHECK(this->get_Objects(&Value));
    return Value;
  }


  __property   BSTR            Id = {read = get_Id, write = set_Id};
  __property   Thinfinity_tlb::IJSPropertiesPtr Properties = {read = get_Properties};
  __property   Thinfinity_tlb::IJSMethodsPtr Methods = {read = get_Methods};
  __property   Thinfinity_tlb::IJSEventsPtr Events = {read = get_Events};
  __property   Thinfinity_tlb::IJSObjectsPtr Objects = {read = get_Objects};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSObjectEvents
// Flags:     (4096) Dispatchable
// GUID:      {A3D640E8-CD18-4196-A1A2-C87C82B0F88B}
// *********************************************************************//
interface IJSObjectEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnExecuteMethod(Thinfinity_tlb::IJSObject* Caller/*[in]*/, 
                                  Thinfinity_tlb::IJSMethod* Method/*[in]*/)
  {
    _TDispID _dispid(/* OnExecuteMethod */ DISPID(101));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSObject*)Caller /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Thinfinity_tlb::IJSMethod*)Method /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnPropertyChange(Thinfinity_tlb::IJSObject* Caller/*[in]*/, 
                                   Thinfinity_tlb::IJSProperty* Prop/*[in]*/)
  {
    _TDispID _dispid(/* OnPropertyChange */ DISPID(102));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSObject*)Caller /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Thinfinity_tlb::IJSProperty*)Prop /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IJSObjects
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2406011-568E-4EAC-B95C-EF29E4806B86}
// *********************************************************************//
interface IJSObjects  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Thinfinity_tlb::IJSObject** Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Id/*[in]*/, 
                                        Thinfinity_tlb::IJSObject** Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE Remove(Thinfinity_tlb::IJSObject* Item/*[in]*/) = 0; // [206]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Value;
    OLECHECK(this->get_Count((long*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSObject* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Thinfinity_tlb::IJSObject* Value = 0;
    OLECHECK(this->get_Item(Index, (Thinfinity_tlb::IJSObject**)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSObject* __fastcall Add(BSTR Id/*[in]*/)
  {
    Thinfinity_tlb::IJSObject* Value = 0;
    OLECHECK(this->Add(Id, (Thinfinity_tlb::IJSObject**)&Value));
    return Value;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F95C0E9-E7BF-48C9-AA35-88AD0149109B}
// *********************************************************************//
interface IJSProperty  : public Thinfinity_tlb::IJSNamedValue
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [401]
  virtual HRESULT STDMETHODCALLTYPE set_ReadOnly(VARIANT_BOOL Value/*[in]*/) = 0; // [401]
  virtual HRESULT STDMETHODCALLTYPE OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                                          Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/) = 0; // [402]
  virtual HRESULT STDMETHODCALLTYPE OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                                          Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/) = 0; // [403]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_ReadOnly(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ReadOnly((VARIANT_BOOL*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSProperty* __fastcall OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/)
  {
    Thinfinity_tlb::IJSProperty* OutRetVal = 0;
    OLECHECK(this->OnGet(Binding, (Thinfinity_tlb::IJSProperty**)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IJSProperty* __fastcall OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/)
  {
    Thinfinity_tlb::IJSProperty* OutRetVal = 0;
    OLECHECK(this->OnSet(Binding, (Thinfinity_tlb::IJSProperty**)&OutRetVal));
    return OutRetVal;
  }


  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FCBB688F-8FB2-42C1-86FC-0AAF3B2A500C}
// *********************************************************************//
interface IJSProperties  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Thinfinity_tlb::IJSProperty** Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, 
                                        Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE Remove(Thinfinity_tlb::IJSProperty* Item/*[in]*/) = 0; // [206]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Value;
    OLECHECK(this->get_Count((long*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSProperty* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Thinfinity_tlb::IJSProperty* Value = 0;
    OLECHECK(this->get_Item(Index, (Thinfinity_tlb::IJSProperty**)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSProperty* __fastcall Add(BSTR Name/*[in]*/)
  {
    Thinfinity_tlb::IJSProperty* OutRetVal = 0;
    OLECHECK(this->Add(Name, (Thinfinity_tlb::IJSProperty**)&OutRetVal));
    return OutRetVal;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSArgument
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F8C4462-D7B5-4696-BAD5-16DFAA6E2601}
// *********************************************************************//
interface IJSArgument  : public Thinfinity_tlb::IJSNamedValue
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC097EF5-6D8A-4C80-A2AD-382FDC75E901}
// *********************************************************************//
interface IJSArguments  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Thinfinity_tlb::IJSArgument** Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, 
                                        Thinfinity_tlb::IJSArgument** OutRetVal/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE Remove(Thinfinity_tlb::IJSArgument* Item/*[in]*/) = 0; // [206]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Value;
    OLECHECK(this->get_Count((long*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSArgument* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Thinfinity_tlb::IJSArgument* Value = 0;
    OLECHECK(this->get_Item(Index, (Thinfinity_tlb::IJSArgument**)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSArgument* __fastcall Add(BSTR Name/*[in]*/)
  {
    Thinfinity_tlb::IJSArgument* OutRetVal = 0;
    OLECHECK(this->Add(Name, (Thinfinity_tlb::IJSArgument**)&OutRetVal));
    return OutRetVal;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSMethod
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C45D6A8F-AD4A-47BB-AC3A-C125D6D5D27E}
// *********************************************************************//
interface IJSMethod  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_ReturnValue(Thinfinity_tlb::IJSValue** Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE AddArgument(BSTR Name/*[in]*/, 
                                                Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                                                Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/, 
                                           Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/) = 0; // [205]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Name((BSTR*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSArgumentsPtr __fastcall get_Arguments(void)
  {
    Thinfinity_tlb::IJSArgumentsPtr Value;
    OLECHECK(this->get_Arguments(&Value));
    return Value;
  }

  Thinfinity_tlb::IJSValuePtr __fastcall get_ReturnValue(void)
  {
    Thinfinity_tlb::IJSValuePtr Value;
    OLECHECK(this->get_ReturnValue(&Value));
    return Value;
  }

  Thinfinity_tlb::IJSMethod* __fastcall AddArgument(BSTR Name/*[in]*/, 
                                                    Thinfinity_tlb::IJSDataType DataType/*[in]*/)
  {
    Thinfinity_tlb::IJSMethod* OutRetVal = 0;
    OLECHECK(this->AddArgument(Name, DataType, (Thinfinity_tlb::IJSMethod**)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IJSMethod* __fastcall OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/)
  {
    Thinfinity_tlb::IJSMethod* OutRetVal = 0;
    OLECHECK(this->OnCall(Callback, (Thinfinity_tlb::IJSMethod**)&OutRetVal));
    return OutRetVal;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Thinfinity_tlb::IJSArgumentsPtr Arguments = {read = get_Arguments};
  __property   Thinfinity_tlb::IJSValuePtr ReturnValue = {read = get_ReturnValue};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSMethods
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4CB461F-586E-4121-ABD7-345B87BC423A}
// *********************************************************************//
interface IJSMethods  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Thinfinity_tlb::IJSMethod** Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, 
                                        Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE Remove(Thinfinity_tlb::IJSMethod* Item/*[in]*/) = 0; // [206]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Value;
    OLECHECK(this->get_Count((long*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSMethod* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Thinfinity_tlb::IJSMethod* Value = 0;
    OLECHECK(this->get_Item(Index, (Thinfinity_tlb::IJSMethod**)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSMethod* __fastcall Add(BSTR Name/*[in]*/)
  {
    Thinfinity_tlb::IJSMethod* OutRetVal = 0;
    OLECHECK(this->Add(Name, (Thinfinity_tlb::IJSMethod**)&OutRetVal));
    return OutRetVal;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSEvent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8B66EACD-9619-43CF-9196-DCDA17F5500E}
// *********************************************************************//
interface IJSEvent  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE AddArgument(BSTR Name/*[in]*/, 
                                                Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                                                Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE ArgumentAsNull(VARIANT Index/*[in]*/, 
                                                   Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                                     Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/, 
                                                  Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE ArgumentAsBool(VARIANT Index/*[in]*/, VARIANT_BOOL Value/*[in]*/, 
                                                   Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/, 
                                                    Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                                   Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE Fire(void) = 0; // [210]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Name((BSTR*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSArgumentsPtr __fastcall get_Arguments(void)
  {
    Thinfinity_tlb::IJSArgumentsPtr Value;
    OLECHECK(this->get_Arguments(&Value));
    return Value;
  }

  Thinfinity_tlb::IJSEvent* __fastcall AddArgument(BSTR Name/*[in]*/, 
                                                   Thinfinity_tlb::IJSDataType DataType/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* OutRetVal = 0;
    OLECHECK(this->AddArgument(Name, DataType, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsNull(VARIANT Index/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* OutRetVal = 0;
    OLECHECK(this->ArgumentAsNull(Index, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* OutRetVal = 0;
    OLECHECK(this->ArgumentAsString(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* OutRetVal = 0;
    OLECHECK(this->ArgumentAsInt(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsBool(VARIANT Index/*[in]*/, 
                                                      VARIANT_BOOL Value/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* OutRetVal = 0;
    OLECHECK(this->ArgumentAsBool(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* OutRetVal = 0;
    OLECHECK(this->ArgumentAsFloat(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
    return OutRetVal;
  }

  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* OutRetVal = 0;
    OLECHECK(this->ArgumentAsJSON(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
    return OutRetVal;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Thinfinity_tlb::IJSArgumentsPtr Arguments = {read = get_Arguments};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSEvents
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6AE952B3-B6DA-4C81-80FF-D0A162E11D02}
// *********************************************************************//
interface IJSEvents  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Thinfinity_tlb::IJSEvent** Value/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, 
                                        Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE Remove(Thinfinity_tlb::IJSEvent* Item/*[in]*/) = 0; // [206]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long Value;
    OLECHECK(this->get_Count((long*)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSEvent* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* Value = 0;
    OLECHECK(this->get_Item(Index, (Thinfinity_tlb::IJSEvent**)&Value));
    return Value;
  }

  Thinfinity_tlb::IJSEvent* __fastcall Add(BSTR Name/*[in]*/)
  {
    Thinfinity_tlb::IJSEvent* OutRetVal = 0;
    OLECHECK(this->Add(Name, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
    return OutRetVal;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSBinding
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ACFC2953-37F1-479E-B405-D0BB75E156E6}
// *********************************************************************//
interface IJSBinding  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Set_(Thinfinity_tlb::IJSObject* Parent/*[in]*/, 
                                         Thinfinity_tlb::IJSProperty* Prop/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IJSCallback
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ADD570A0-491A-4E40-8120-57B4D1245FD3}
// *********************************************************************//
interface IJSCallback  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Callback(Thinfinity_tlb::IJSObject* Parent/*[in]*/, 
                                             Thinfinity_tlb::IJSMethod* Method/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRecorder
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D89DA2B6-B7BF-4065-80F5-6D78B331C7DD}
// *********************************************************************//
interface IRecorder  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Filename(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_Filename(BSTR Value/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE Rec(BSTR Track/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE Play(long From/*[in]*/, long To/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_Position(long* Value/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Value/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_State(Thinfinity_tlb::RecorderState* Value/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_Options(unsigned_long* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_Options(unsigned_long Value/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_Tracks(Thinfinity_tlb::IRecTracks** Value/*[out,retval]*/) = 0; // [210]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Filename(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Filename((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_Position(void)
  {
    long Value;
    OLECHECK(this->get_Position((long*)&Value));
    return Value;
  }

  long __fastcall get_Count(void)
  {
    long Value;
    OLECHECK(this->get_Count((long*)&Value));
    return Value;
  }

  Thinfinity_tlb::RecorderState __fastcall get_State(void)
  {
    Thinfinity_tlb::RecorderState Value;
    OLECHECK(this->get_State((Thinfinity_tlb::RecorderState*)&Value));
    return Value;
  }

  unsigned_long __fastcall get_Options(void)
  {
    unsigned_long Value;
    OLECHECK(this->get_Options((unsigned_long*)&Value));
    return Value;
  }

  Thinfinity_tlb::IRecTracksPtr __fastcall get_Tracks(void)
  {
    Thinfinity_tlb::IRecTracksPtr Value;
    OLECHECK(this->get_Tracks(&Value));
    return Value;
  }


  __property   BSTR            Filename = {read = get_Filename, write = set_Filename};
  __property   long            Position = {read = get_Position};
  __property   long            Count = {read = get_Count};
  __property   Thinfinity_tlb::RecorderState State = {read = get_State};
  __property   unsigned_long   Options = {read = get_Options, write = set_Options};
  __property   Thinfinity_tlb::IRecTracksPtr Tracks = {read = get_Tracks};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRecTrack
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D4744AE1-70CB-43DD-BEA5-A5310B2E24C6}
// *********************************************************************//
interface IRecTrack  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Position(long* Value/*[out,retval]*/) = 0; // [202]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Name((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_Position(void)
  {
    long Value;
    OLECHECK(this->get_Position((long*)&Value));
    return Value;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   long            Position = {read = get_Position};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRecTracks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB45B615-9309-471E-A455-3FE93F88E674}
// *********************************************************************//
interface IRecTracks  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, 
                                             Thinfinity_tlb::IRecTrack** Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Value/*[out,retval]*/) = 0; // [202]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Thinfinity_tlb::IRecTrack* __fastcall get_Item(long Index/*[in]*/)
  {
    Thinfinity_tlb::IRecTrack* Value = 0;
    OLECHECK(this->get_Item(Index, (Thinfinity_tlb::IRecTrack**)&Value));
    return Value;
  }

  long __fastcall get_Count(void)
  {
    long Value;
    OLECHECK(this->get_Count((long*)&Value));
    return Value;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFileSystemFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3FE99D2F-0CFC-43D1-B762-0C7C15EB872E}
// *********************************************************************//
interface IFileSystemFilter  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_User(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_User(BSTR Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_CfgFile(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_CfgFile(BSTR Value/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_Active(VARIANT_BOOL Value/*[in]*/) = 0; // [203]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_User(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_User((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_CfgFile(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_CfgFile((BSTR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   BSTR            User = {read = get_User, write = set_User};
  __property   BSTR            CfgFile = {read = get_CfgFile, write = set_CfgFile};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRegistryFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4834F840-915B-488B-ADEA-98890A04CEE6}
// *********************************************************************//
interface IRegistryFilter  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_User(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_User(BSTR Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_CfgFile(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_CfgFile(BSTR Value/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_Active(VARIANT_BOOL Value/*[in]*/) = 0; // [203]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_User(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_User((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_CfgFile(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_CfgFile((BSTR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   BSTR            User = {read = get_User, write = set_User};
  __property   BSTR            CfgFile = {read = get_CfgFile, write = set_CfgFile};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIVirtualUI
// Interface: IVirtualUI
// *********************************************************************//
template <class T /* IVirtualUI */ >
class TCOMIVirtualUIT : public TComInterface<IVirtualUI>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIVirtualUIT() {}
  TCOMIVirtualUIT(IVirtualUI *intf, bool addRef = false) : TComInterface<IVirtualUI>(intf, addRef) {}
  TCOMIVirtualUIT(const TCOMIVirtualUIT& src) : TComInterface<IVirtualUI>(src) {}
  TCOMIVirtualUIT& operator=(const TCOMIVirtualUIT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Start(long Timeout/*[in]*/, VARIANT_BOOL* OutRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Start(long Timeout/*[in]*/);
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DevMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DevMode(void);
  HRESULT         __fastcall set_DevMode(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_StdDialogs(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StdDialogs(void);
  HRESULT         __fastcall set_StdDialogs(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_BrowserInfo(Thinfinity_tlb::IBrowserInfo** Value/*[out,retval]*/);
  Thinfinity_tlb::IBrowserInfoPtr __fastcall get_BrowserInfo(void);
  HRESULT         __fastcall get_DevServer(Thinfinity_tlb::IDevServer** Value/*[out,retval]*/);
  Thinfinity_tlb::IDevServerPtr __fastcall get_DevServer(void);
  HRESULT         __fastcall get_ClientSettings(Thinfinity_tlb::IClientSettings** Value/*[out,retval]*/);
  Thinfinity_tlb::IClientSettingsPtr __fastcall get_ClientSettings(void);
  HRESULT         __fastcall DownloadFile(BSTR LocalFilename/*[in]*/, BSTR RemoteFilename/*[in]*/, 
                                          BSTR MimeType/*[in]*/);
  HRESULT         __fastcall PrintPdf(BSTR AFileName/*[in]*/);
  HRESULT         __fastcall OpenLinkDlg(BSTR url/*[in]*/, BSTR caption/*[in]*/);
  HRESULT         __fastcall SendMessage(BSTR Data/*[in]*/);
  HRESULT         __fastcall AllowExecute(BSTR Filename/*[in]*/);
  HRESULT         __fastcall SetImageQualityByWnd(long Wnd/*[in]*/, BSTR Class/*[in]*/, 
                                                  long Quality/*[in]*/);
  HRESULT         __fastcall UploadFile(BSTR ServerDirectory/*[in]*/);
  HRESULT         __fastcall TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/, 
                                            VARIANT_BOOL* OutRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/);
  HRESULT         __fastcall ShowVirtualKeyboard(void);
  HRESULT         __fastcall get_Recorder(Thinfinity_tlb::IRecorder** Value/*[out,retval]*/);
  Thinfinity_tlb::IRecorderPtr __fastcall get_Recorder(void);
  HRESULT         __fastcall PreviewPdf(BSTR AFileName/*[in]*/);
  HRESULT         __fastcall get_FileSystemFilter(Thinfinity_tlb::IFileSystemFilter** Value/*[out,retval]*/);
  Thinfinity_tlb::IFileSystemFilterPtr __fastcall get_FileSystemFilter(void);
  HRESULT         __fastcall get_RegistryFilter(Thinfinity_tlb::IRegistryFilter** Value/*[out,retval]*/);
  Thinfinity_tlb::IRegistryFilterPtr __fastcall get_RegistryFilter(void);

  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    DevMode = {read = get_DevMode, write = set_DevMode};
  __property   VARIANT_BOOL    StdDialogs = {read = get_StdDialogs, write = set_StdDialogs};
  __property   Thinfinity_tlb::IBrowserInfoPtr BrowserInfo = {read = get_BrowserInfo};
  __property   Thinfinity_tlb::IDevServerPtr DevServer = {read = get_DevServer};
  __property   Thinfinity_tlb::IClientSettingsPtr ClientSettings = {read = get_ClientSettings};
  __property   Thinfinity_tlb::IRecorderPtr Recorder = {read = get_Recorder};
  __property   Thinfinity_tlb::IFileSystemFilterPtr FileSystemFilter = {read = get_FileSystemFilter};
  __property   Thinfinity_tlb::IRegistryFilterPtr RegistryFilter = {read = get_RegistryFilter};
};
typedef TCOMIVirtualUIT<IVirtualUI> TCOMIVirtualUI;

// *********************************************************************//
// DispIntf:  IVirtualUI
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B85F81B-72A2-4FCD-9A6B-9CAC24B7A511}
// *********************************************************************//
template<class T>
class IVirtualUIDispT : public TAutoDriver<IVirtualUI>
{
public:
  IVirtualUIDispT(){}

  IVirtualUIDispT(IVirtualUI *pintf)
  {
    TAutoDriver<IVirtualUI>::Bind(pintf, false);
  }

  IVirtualUIDispT(IVirtualUIPtr pintf)
  {
    TAutoDriver<IVirtualUI>::Bind(pintf, true);
  }

  IVirtualUIDispT& operator=(IVirtualUI *pintf)
  {
    TAutoDriver<IVirtualUI>::Bind(pintf, false);
    return *this;
  }

  IVirtualUIDispT& operator=(IVirtualUIPtr pintf)
  {
    TAutoDriver<IVirtualUI>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_VirtualUI));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_VirtualUI);
  }

  HRESULT         __fastcall Start(long Timeout/*[in]*/, VARIANT_BOOL* OutRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Start(long Timeout/*[in]*/);
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DevMode(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DevMode(void);
  HRESULT         __fastcall set_DevMode(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_StdDialogs(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StdDialogs(void);
  HRESULT         __fastcall set_StdDialogs(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_BrowserInfo(Thinfinity_tlb::IBrowserInfo** Value/*[out,retval]*/);
  Thinfinity_tlb::IBrowserInfoPtr __fastcall get_BrowserInfo(void);
  HRESULT         __fastcall get_DevServer(Thinfinity_tlb::IDevServer** Value/*[out,retval]*/);
  Thinfinity_tlb::IDevServerPtr __fastcall get_DevServer(void);
  HRESULT         __fastcall get_ClientSettings(Thinfinity_tlb::IClientSettings** Value/*[out,retval]*/);
  Thinfinity_tlb::IClientSettingsPtr __fastcall get_ClientSettings(void);
  HRESULT         __fastcall DownloadFile(BSTR LocalFilename/*[in]*/, BSTR RemoteFilename/*[in]*/, 
                                          BSTR MimeType/*[in]*/);
  HRESULT         __fastcall PrintPdf(BSTR AFileName/*[in]*/);
  HRESULT         __fastcall OpenLinkDlg(BSTR url/*[in]*/, BSTR caption/*[in]*/);
  HRESULT         __fastcall SendMessage(BSTR Data/*[in]*/);
  HRESULT         __fastcall AllowExecute(BSTR Filename/*[in]*/);
  HRESULT         __fastcall SetImageQualityByWnd(long Wnd/*[in]*/, BSTR Class/*[in]*/, 
                                                  long Quality/*[in]*/);
  HRESULT         __fastcall UploadFile(BSTR ServerDirectory/*[in]*/);
  HRESULT         __fastcall TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/, 
                                            VARIANT_BOOL* OutRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/);
  HRESULT         __fastcall ShowVirtualKeyboard();
  HRESULT         __fastcall get_Recorder(Thinfinity_tlb::IRecorder** Value/*[out,retval]*/);
  Thinfinity_tlb::IRecorderPtr __fastcall get_Recorder(void);
  HRESULT         __fastcall PreviewPdf(BSTR AFileName/*[in]*/);
  HRESULT         __fastcall get_FileSystemFilter(Thinfinity_tlb::IFileSystemFilter** Value/*[out,retval]*/);
  Thinfinity_tlb::IFileSystemFilterPtr __fastcall get_FileSystemFilter(void);
  HRESULT         __fastcall get_RegistryFilter(Thinfinity_tlb::IRegistryFilter** Value/*[out,retval]*/);
  Thinfinity_tlb::IRegistryFilterPtr __fastcall get_RegistryFilter(void);

  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    DevMode = {read = get_DevMode, write = set_DevMode};
  __property   VARIANT_BOOL    StdDialogs = {read = get_StdDialogs, write = set_StdDialogs};
  __property   Thinfinity_tlb::IBrowserInfoPtr BrowserInfo = {read = get_BrowserInfo};
  __property   Thinfinity_tlb::IDevServerPtr DevServer = {read = get_DevServer};
  __property   Thinfinity_tlb::IClientSettingsPtr ClientSettings = {read = get_ClientSettings};
  __property   Thinfinity_tlb::IRecorderPtr Recorder = {read = get_Recorder};
  __property   Thinfinity_tlb::IFileSystemFilterPtr FileSystemFilter = {read = get_FileSystemFilter};
  __property   Thinfinity_tlb::IRegistryFilterPtr RegistryFilter = {read = get_RegistryFilter};
};
typedef IVirtualUIDispT<IVirtualUI> IVirtualUIDisp;

// *********************************************************************//
// DispIntf:  IEvents
// Flags:     (4096) Dispatchable
// GUID:      {1C5700BC-2317-4062-B614-0A4E286CFE68}
// *********************************************************************//
template <class T>
class IEventsDispT : public TAutoDriver<IEvents>
{
public:
  IEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnGetUploadDir(BSTR* Directory/*[in,out]*/, 
                                            VARIANT_BOOL* Handled/*[in,out]*/);
  void            __fastcall OnBrowserResize(long* Width/*[in,out]*/, long* Height/*[in,out]*/, 
                                             VARIANT_BOOL* ResizeMaximized/*[in,out]*/);
  void            __fastcall OnClose();
  void            __fastcall OnReceiveMessage(BSTR Data/*[in]*/);
  void            __fastcall OnDownloadEnd(BSTR Filename/*[in]*/);
  HRESULT         __fastcall OnRecorderChanged();

};
typedef IEventsDispT<IEvents> IEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIBrowserInfo
// Interface: IBrowserInfo
// *********************************************************************//
template <class T /* IBrowserInfo */ >
class TCOMIBrowserInfoT : public TComInterface<IBrowserInfo>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIBrowserInfoT() {}
  TCOMIBrowserInfoT(IBrowserInfo *intf, bool addRef = false) : TComInterface<IBrowserInfo>(intf, addRef) {}
  TCOMIBrowserInfoT(const TCOMIBrowserInfoT& src) : TComInterface<IBrowserInfo>(src) {}
  TCOMIBrowserInfoT& operator=(const TCOMIBrowserInfoT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ViewWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_ViewWidth(void);
  HRESULT         __fastcall set_ViewWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_ViewHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_ViewHeight(void);
  HRESULT         __fastcall set_ViewHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_BrowserWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BrowserWidth(void);
  HRESULT         __fastcall get_BrowserHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_BrowserHeight(void);
  HRESULT         __fastcall get_ScreenWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_ScreenWidth(void);
  HRESULT         __fastcall get_ScreenHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_ScreenHeight(void);
  HRESULT         __fastcall get_Username(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Username(void);
  HRESULT         __fastcall get_IPAddress(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IPAddress(void);
  HRESULT         __fastcall get_UserAgent(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UserAgent(void);
  HRESULT         __fastcall get_ScreenResolution(long* Value/*[out,retval]*/);
  long            __fastcall get_ScreenResolution(void);
  HRESULT         __fastcall get_Orientation(Thinfinity_tlb::Orientation* Value/*[out,retval]*/);
  Thinfinity_tlb::Orientation __fastcall get_Orientation(void);
  HRESULT         __fastcall get_UniqueBrowserId(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UniqueBrowserId(void);
  HRESULT         __fastcall GetCookie(BSTR Name/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall GetCookie(BSTR Name/*[in]*/);
  HRESULT         __fastcall SetCookie(BSTR Name/*[in]*/, BSTR Value/*[in]*/, BSTR Expires/*[in]*/);
  HRESULT         __fastcall get_Location(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Location(void);
  HRESULT         __fastcall get_CustomData(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CustomData(void);
  HRESULT         __fastcall set_CustomData(BSTR Value/*[in]*/);

  __property   long            ViewWidth = {read = get_ViewWidth, write = set_ViewWidth};
  __property   long            ViewHeight = {read = get_ViewHeight, write = set_ViewHeight};
  __property   long            BrowserWidth = {read = get_BrowserWidth};
  __property   long            BrowserHeight = {read = get_BrowserHeight};
  __property   long            ScreenWidth = {read = get_ScreenWidth};
  __property   long            ScreenHeight = {read = get_ScreenHeight};
  __property   BSTR            Username = {read = get_Username};
  __property   BSTR            IPAddress = {read = get_IPAddress};
  __property   BSTR            UserAgent = {read = get_UserAgent};
  __property   long            ScreenResolution = {read = get_ScreenResolution};
  __property   Thinfinity_tlb::Orientation Orientation = {read = get_Orientation};
  __property   BSTR            UniqueBrowserId = {read = get_UniqueBrowserId};
  __property   BSTR            Location = {read = get_Location};
  __property   BSTR            CustomData = {read = get_CustomData, write = set_CustomData};
};
typedef TCOMIBrowserInfoT<IBrowserInfo> TCOMIBrowserInfo;

// *********************************************************************//
// DispIntf:  IBrowserInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D9F5347-460B-4275-BDF2-F2738E7F6757}
// *********************************************************************//
template<class T>
class IBrowserInfoDispT : public TAutoDriver<IBrowserInfo>
{
public:
  IBrowserInfoDispT(){}

  IBrowserInfoDispT(IBrowserInfo *pintf)
  {
    TAutoDriver<IBrowserInfo>::Bind(pintf, false);
  }

  IBrowserInfoDispT(IBrowserInfoPtr pintf)
  {
    TAutoDriver<IBrowserInfo>::Bind(pintf, true);
  }

  IBrowserInfoDispT& operator=(IBrowserInfo *pintf)
  {
    TAutoDriver<IBrowserInfo>::Bind(pintf, false);
    return *this;
  }

  IBrowserInfoDispT& operator=(IBrowserInfoPtr pintf)
  {
    TAutoDriver<IBrowserInfo>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_BrowserInfo));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_BrowserInfo);
  }

  HRESULT         __fastcall get_ViewWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_ViewWidth(void);
  HRESULT         __fastcall set_ViewWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_ViewHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_ViewHeight(void);
  HRESULT         __fastcall set_ViewHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_BrowserWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BrowserWidth(void);
  HRESULT         __fastcall get_BrowserHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_BrowserHeight(void);
  HRESULT         __fastcall get_ScreenWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_ScreenWidth(void);
  HRESULT         __fastcall get_ScreenHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_ScreenHeight(void);
  HRESULT         __fastcall get_Username(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Username(void);
  HRESULT         __fastcall get_IPAddress(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_IPAddress(void);
  HRESULT         __fastcall get_UserAgent(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UserAgent(void);
  HRESULT         __fastcall get_ScreenResolution(long* Value/*[out,retval]*/);
  long            __fastcall get_ScreenResolution(void);
  HRESULT         __fastcall get_Orientation(Thinfinity_tlb::Orientation* Value/*[out,retval]*/);
  Thinfinity_tlb::Orientation __fastcall get_Orientation(void);
  HRESULT         __fastcall get_UniqueBrowserId(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_UniqueBrowserId(void);
  HRESULT         __fastcall GetCookie(BSTR Name/*[in]*/, BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall GetCookie(BSTR Name/*[in]*/);
  HRESULT         __fastcall SetCookie(BSTR Name/*[in]*/, BSTR Value/*[in]*/, BSTR Expires/*[in]*/);
  HRESULT         __fastcall get_Location(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Location(void);
  HRESULT         __fastcall get_CustomData(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CustomData(void);
  HRESULT         __fastcall set_CustomData(BSTR Value/*[in]*/);

  __property   long            ViewWidth = {read = get_ViewWidth, write = set_ViewWidth};
  __property   long            ViewHeight = {read = get_ViewHeight, write = set_ViewHeight};
  __property   long            BrowserWidth = {read = get_BrowserWidth};
  __property   long            BrowserHeight = {read = get_BrowserHeight};
  __property   long            ScreenWidth = {read = get_ScreenWidth};
  __property   long            ScreenHeight = {read = get_ScreenHeight};
  __property   BSTR            Username = {read = get_Username};
  __property   BSTR            IPAddress = {read = get_IPAddress};
  __property   BSTR            UserAgent = {read = get_UserAgent};
  __property   long            ScreenResolution = {read = get_ScreenResolution};
  __property   Thinfinity_tlb::Orientation Orientation = {read = get_Orientation};
  __property   BSTR            UniqueBrowserId = {read = get_UniqueBrowserId};
  __property   BSTR            Location = {read = get_Location};
  __property   BSTR            CustomData = {read = get_CustomData, write = set_CustomData};
};
typedef IBrowserInfoDispT<IBrowserInfo> IBrowserInfoDisp;

// *********************************************************************//
// SmartIntf: TCOMIDevServer
// Interface: IDevServer
// *********************************************************************//
template <class T /* IDevServer */ >
class TCOMIDevServerT : public TComInterface<IDevServer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDevServerT() {}
  TCOMIDevServerT(IDevServer *intf, bool addRef = false) : TComInterface<IDevServer>(intf, addRef) {}
  TCOMIDevServerT(const TCOMIDevServerT& src) : TComInterface<IDevServer>(src) {}
  TCOMIDevServerT& operator=(const TCOMIDevServerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Port(long* Value/*[out,retval]*/);
  long            __fastcall get_Port(void);
  HRESULT         __fastcall set_Port(long Value/*[in]*/);
  HRESULT         __fastcall get_StartBrowser(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StartBrowser(void);
  HRESULT         __fastcall set_StartBrowser(VARIANT_BOOL Value/*[in]*/);

  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            Port = {read = get_Port, write = set_Port};
  __property   VARIANT_BOOL    StartBrowser = {read = get_StartBrowser, write = set_StartBrowser};
};
typedef TCOMIDevServerT<IDevServer> TCOMIDevServer;

// *********************************************************************//
// DispIntf:  IDevServer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3EAC0CA-D7AB-4AB1-9E24-84A63C8C3F80}
// *********************************************************************//
template<class T>
class IDevServerDispT : public TAutoDriver<IDevServer>
{
public:
  IDevServerDispT(){}

  IDevServerDispT(IDevServer *pintf)
  {
    TAutoDriver<IDevServer>::Bind(pintf, false);
  }

  IDevServerDispT(IDevServerPtr pintf)
  {
    TAutoDriver<IDevServer>::Bind(pintf, true);
  }

  IDevServerDispT& operator=(IDevServer *pintf)
  {
    TAutoDriver<IDevServer>::Bind(pintf, false);
    return *this;
  }

  IDevServerDispT& operator=(IDevServerPtr pintf)
  {
    TAutoDriver<IDevServer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DevServer));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DevServer);
  }

  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Port(long* Value/*[out,retval]*/);
  long            __fastcall get_Port(void);
  HRESULT         __fastcall set_Port(long Value/*[in]*/);
  HRESULT         __fastcall get_StartBrowser(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StartBrowser(void);
  HRESULT         __fastcall set_StartBrowser(VARIANT_BOOL Value/*[in]*/);

  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   long            Port = {read = get_Port, write = set_Port};
  __property   VARIANT_BOOL    StartBrowser = {read = get_StartBrowser, write = set_StartBrowser};
};
typedef IDevServerDispT<IDevServer> IDevServerDisp;

// *********************************************************************//
// SmartIntf: TCOMIClientSettings
// Interface: IClientSettings
// *********************************************************************//
template <class T /* IClientSettings */ >
class TCOMIClientSettingsT : public TComInterface<IClientSettings>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIClientSettingsT() {}
  TCOMIClientSettingsT(IClientSettings *intf, bool addRef = false) : TComInterface<IClientSettings>(intf, addRef) {}
  TCOMIClientSettingsT(const TCOMIClientSettingsT& src) : TComInterface<IClientSettings>(src) {}
  TCOMIClientSettingsT& operator=(const TCOMIClientSettingsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle* Value/*[out,retval]*/);
  Thinfinity_tlb::MouseMoveGestureStyle __fastcall get_MouseMoveGestureStyle(void);
  HRESULT         __fastcall set_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle Value/*[in]*/);
  HRESULT         __fastcall get_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction* Value/*[out,retval]*/);
  Thinfinity_tlb::MouseMoveGestureAction __fastcall get_MouseMoveGestureAction(void);
  HRESULT         __fastcall set_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction Value/*[in]*/);
  HRESULT         __fastcall get_CursorVisible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CursorVisible(void);
  HRESULT         __fastcall set_CursorVisible(VARIANT_BOOL Value/*[in]*/);

  __property   Thinfinity_tlb::MouseMoveGestureStyle MouseMoveGestureStyle = {read = get_MouseMoveGestureStyle, write = set_MouseMoveGestureStyle};
  __property   Thinfinity_tlb::MouseMoveGestureAction MouseMoveGestureAction = {read = get_MouseMoveGestureAction, write = set_MouseMoveGestureAction};
  __property   VARIANT_BOOL    CursorVisible = {read = get_CursorVisible, write = set_CursorVisible};
};
typedef TCOMIClientSettingsT<IClientSettings> TCOMIClientSettings;

// *********************************************************************//
// DispIntf:  IClientSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {439624CA-ED33-47BE-9211-91290F29584A}
// *********************************************************************//
template<class T>
class IClientSettingsDispT : public TAutoDriver<IClientSettings>
{
public:
  IClientSettingsDispT(){}

  IClientSettingsDispT(IClientSettings *pintf)
  {
    TAutoDriver<IClientSettings>::Bind(pintf, false);
  }

  IClientSettingsDispT(IClientSettingsPtr pintf)
  {
    TAutoDriver<IClientSettings>::Bind(pintf, true);
  }

  IClientSettingsDispT& operator=(IClientSettings *pintf)
  {
    TAutoDriver<IClientSettings>::Bind(pintf, false);
    return *this;
  }

  IClientSettingsDispT& operator=(IClientSettingsPtr pintf)
  {
    TAutoDriver<IClientSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ClientSettings));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ClientSettings);
  }

  HRESULT         __fastcall get_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle* Value/*[out,retval]*/);
  Thinfinity_tlb::MouseMoveGestureStyle __fastcall get_MouseMoveGestureStyle(void);
  HRESULT         __fastcall set_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle Value/*[in]*/);
  HRESULT         __fastcall get_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction* Value/*[out,retval]*/);
  Thinfinity_tlb::MouseMoveGestureAction __fastcall get_MouseMoveGestureAction(void);
  HRESULT         __fastcall set_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction Value/*[in]*/);
  HRESULT         __fastcall get_CursorVisible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CursorVisible(void);
  HRESULT         __fastcall set_CursorVisible(VARIANT_BOOL Value/*[in]*/);

  __property   Thinfinity_tlb::MouseMoveGestureStyle MouseMoveGestureStyle = {read = get_MouseMoveGestureStyle, write = set_MouseMoveGestureStyle};
  __property   Thinfinity_tlb::MouseMoveGestureAction MouseMoveGestureAction = {read = get_MouseMoveGestureAction, write = set_MouseMoveGestureAction};
  __property   VARIANT_BOOL    CursorVisible = {read = get_CursorVisible, write = set_CursorVisible};
};
typedef IClientSettingsDispT<IClientSettings> IClientSettingsDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSValue
// Interface: IJSValue
// *********************************************************************//
template <class T /* IJSValue */ >
class TCOMIJSValueT : public TComInterface<IJSValue>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSValueT() {}
  TCOMIJSValueT(IJSValue *intf, bool addRef = false) : TComInterface<IJSValue>(intf, addRef) {}
  TCOMIJSValueT(const TCOMIJSValueT& src) : TComInterface<IJSValue>(src) {}
  TCOMIJSValueT& operator=(const TCOMIJSValueT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/);
  Thinfinity_tlb::IJSDataType __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/);
  HRESULT         __fastcall get_RawValue(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_RawValue(void);
  HRESULT         __fastcall set_RawValue(VARIANT Value/*[in]*/);
  HRESULT         __fastcall get_AsString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsString(void);
  HRESULT         __fastcall set_AsString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_AsInt(long* Value/*[out,retval]*/);
  long            __fastcall get_AsInt(void);
  HRESULT         __fastcall set_AsInt(long Value/*[in]*/);
  HRESULT         __fastcall get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AsBool(void);
  HRESULT         __fastcall set_AsBool(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AsFloat(float* Value/*[out,retval]*/);
  float           __fastcall get_AsFloat(void);
  HRESULT         __fastcall set_AsFloat(float Value/*[in]*/);
  HRESULT         __fastcall get_AsJSON(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsJSON(void);
  HRESULT         __fastcall set_AsJSON(BSTR Value/*[in]*/);

  __property   Thinfinity_tlb::IJSDataType DataType = {read = get_DataType, write = set_DataType};
  __property   BSTR            AsString = {read = get_AsString, write = set_AsString};
  __property   long            AsInt = {read = get_AsInt, write = set_AsInt};
  __property   VARIANT_BOOL    AsBool = {read = get_AsBool, write = set_AsBool};
  __property   float           AsFloat = {read = get_AsFloat, write = set_AsFloat};
  __property   BSTR            AsJSON = {read = get_AsJSON, write = set_AsJSON};
};
typedef TCOMIJSValueT<IJSValue> TCOMIJSValue;

// *********************************************************************//
// DispIntf:  IJSValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6DE2E6A0-3C3A-47DC-9A93-928135EDAC90}
// *********************************************************************//
template<class T>
class IJSValueDispT : public TAutoDriver<IJSValue>
{
public:
  IJSValueDispT(){}

  IJSValueDispT(IJSValue *pintf)
  {
    TAutoDriver<IJSValue>::Bind(pintf, false);
  }

  IJSValueDispT(IJSValuePtr pintf)
  {
    TAutoDriver<IJSValue>::Bind(pintf, true);
  }

  IJSValueDispT& operator=(IJSValue *pintf)
  {
    TAutoDriver<IJSValue>::Bind(pintf, false);
    return *this;
  }

  IJSValueDispT& operator=(IJSValuePtr pintf)
  {
    TAutoDriver<IJSValue>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSValue));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSValue);
  }

  HRESULT         __fastcall get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/);
  Thinfinity_tlb::IJSDataType __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/);
  HRESULT         __fastcall get_RawValue(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_RawValue(void);
  HRESULT         __fastcall set_RawValue(VARIANT Value/*[in]*/);
  HRESULT         __fastcall get_AsString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsString(void);
  HRESULT         __fastcall set_AsString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_AsInt(long* Value/*[out,retval]*/);
  long            __fastcall get_AsInt(void);
  HRESULT         __fastcall set_AsInt(long Value/*[in]*/);
  HRESULT         __fastcall get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AsBool(void);
  HRESULT         __fastcall set_AsBool(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AsFloat(float* Value/*[out,retval]*/);
  float           __fastcall get_AsFloat(void);
  HRESULT         __fastcall set_AsFloat(float Value/*[in]*/);
  HRESULT         __fastcall get_AsJSON(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsJSON(void);
  HRESULT         __fastcall set_AsJSON(BSTR Value/*[in]*/);

  __property   Thinfinity_tlb::IJSDataType DataType = {read = get_DataType, write = set_DataType};
  __property   BSTR            AsString = {read = get_AsString, write = set_AsString};
  __property   long            AsInt = {read = get_AsInt, write = set_AsInt};
  __property   VARIANT_BOOL    AsBool = {read = get_AsBool, write = set_AsBool};
  __property   float           AsFloat = {read = get_AsFloat, write = set_AsFloat};
  __property   BSTR            AsJSON = {read = get_AsJSON, write = set_AsJSON};
};
typedef IJSValueDispT<IJSValue> IJSValueDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSNamedValue
// Interface: IJSNamedValue
// *********************************************************************//
template <class T /* IJSNamedValue */ >
class TCOMIJSNamedValueT : public TComInterface<IJSNamedValue>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSNamedValueT() {}
  TCOMIJSNamedValueT(IJSNamedValue *intf, bool addRef = false) : TComInterface<IJSNamedValue>(intf, addRef) {}
  TCOMIJSNamedValueT(const TCOMIJSNamedValueT& src) : TComInterface<IJSNamedValue>(src) {}
  TCOMIJSNamedValueT& operator=(const TCOMIJSNamedValueT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
};
typedef TCOMIJSNamedValueT<IJSNamedValue> TCOMIJSNamedValue;

// *********************************************************************//
// DispIntf:  IJSNamedValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E492419B-00AC-4A91-9AE9-9A82B07E89AE}
// *********************************************************************//
template<class T>
class IJSNamedValueDispT : public TAutoDriver<IJSNamedValue>
{
public:
  IJSNamedValueDispT(){}

  IJSNamedValueDispT(IJSNamedValue *pintf)
  {
    TAutoDriver<IJSNamedValue>::Bind(pintf, false);
  }

  IJSNamedValueDispT(IJSNamedValuePtr pintf)
  {
    TAutoDriver<IJSNamedValue>::Bind(pintf, true);
  }

  IJSNamedValueDispT& operator=(IJSNamedValue *pintf)
  {
    TAutoDriver<IJSNamedValue>::Bind(pintf, false);
    return *this;
  }

  IJSNamedValueDispT& operator=(IJSNamedValuePtr pintf)
  {
    TAutoDriver<IJSNamedValue>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSNamedValue));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSNamedValue);
  }

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/);
  Thinfinity_tlb::IJSDataType __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/);
  HRESULT         __fastcall get_RawValue(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_RawValue(void);
  HRESULT         __fastcall set_RawValue(VARIANT Value/*[in]*/);
  HRESULT         __fastcall get_AsString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsString(void);
  HRESULT         __fastcall set_AsString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_AsInt(long* Value/*[out,retval]*/);
  long            __fastcall get_AsInt(void);
  HRESULT         __fastcall set_AsInt(long Value/*[in]*/);
  HRESULT         __fastcall get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AsBool(void);
  HRESULT         __fastcall set_AsBool(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AsFloat(float* Value/*[out,retval]*/);
  float           __fastcall get_AsFloat(void);
  HRESULT         __fastcall set_AsFloat(float Value/*[in]*/);
  HRESULT         __fastcall get_AsJSON(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsJSON(void);
  HRESULT         __fastcall set_AsJSON(BSTR Value/*[in]*/);

  __property   BSTR            Name = {read = get_Name, write = set_Name};

  __property   Thinfinity_tlb::IJSDataType DataType = {read = get_DataType, write = set_DataType};
  __property   BSTR            AsString = {read = get_AsString, write = set_AsString};
  __property   long            AsInt = {read = get_AsInt, write = set_AsInt};
  __property   VARIANT_BOOL    AsBool = {read = get_AsBool, write = set_AsBool};
  __property   float           AsFloat = {read = get_AsFloat, write = set_AsFloat};
  __property   BSTR            AsJSON = {read = get_AsJSON, write = set_AsJSON};
};
typedef IJSNamedValueDispT<IJSNamedValue> IJSNamedValueDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSObject
// Interface: IJSObject
// *********************************************************************//
template <class T /* IJSObject */ >
class TCOMIJSObjectT : public TComInterface<IJSObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSObjectT() {}
  TCOMIJSObjectT(IJSObject *intf, bool addRef = false) : TComInterface<IJSObject>(intf, addRef) {}
  TCOMIJSObjectT(const TCOMIJSObjectT& src) : TComInterface<IJSObject>(src) {}
  TCOMIJSObjectT& operator=(const TCOMIJSObjectT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Id(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT         __fastcall set_Id(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Properties(Thinfinity_tlb::IJSProperties** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSPropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall get_Methods(Thinfinity_tlb::IJSMethods** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSMethodsPtr __fastcall get_Methods(void);
  HRESULT         __fastcall get_Events(Thinfinity_tlb::IJSEvents** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSEventsPtr __fastcall get_Events(void);
  HRESULT         __fastcall get_Objects(Thinfinity_tlb::IJSObjects** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSObjectsPtr __fastcall get_Objects(void);
  HRESULT         __fastcall FireEvent(BSTR Name/*[in]*/, 
                                       Thinfinity_tlb::IJSArguments* Arguments/*[in]*/);
  HRESULT         __fastcall ApplyChanges(void);
  HRESULT         __fastcall ApplyModel(void);

  __property   BSTR            Id = {read = get_Id, write = set_Id};
  __property   Thinfinity_tlb::IJSPropertiesPtr Properties = {read = get_Properties};
  __property   Thinfinity_tlb::IJSMethodsPtr Methods = {read = get_Methods};
  __property   Thinfinity_tlb::IJSEventsPtr Events = {read = get_Events};
  __property   Thinfinity_tlb::IJSObjectsPtr Objects = {read = get_Objects};
};
typedef TCOMIJSObjectT<IJSObject> TCOMIJSObject;

// *********************************************************************//
// DispIntf:  IJSObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59342310-79A7-4B14-8B63-6DF05609AE30}
// *********************************************************************//
template<class T>
class IJSObjectDispT : public TAutoDriver<IJSObject>
{
public:
  IJSObjectDispT(){}

  IJSObjectDispT(IJSObject *pintf)
  {
    TAutoDriver<IJSObject>::Bind(pintf, false);
  }

  IJSObjectDispT(IJSObjectPtr pintf)
  {
    TAutoDriver<IJSObject>::Bind(pintf, true);
  }

  IJSObjectDispT& operator=(IJSObject *pintf)
  {
    TAutoDriver<IJSObject>::Bind(pintf, false);
    return *this;
  }

  IJSObjectDispT& operator=(IJSObjectPtr pintf)
  {
    TAutoDriver<IJSObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSObject);
  }

  HRESULT         __fastcall get_Id(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Id(void);
  HRESULT         __fastcall set_Id(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Properties(Thinfinity_tlb::IJSProperties** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSPropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall get_Methods(Thinfinity_tlb::IJSMethods** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSMethodsPtr __fastcall get_Methods(void);
  HRESULT         __fastcall get_Events(Thinfinity_tlb::IJSEvents** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSEventsPtr __fastcall get_Events(void);
  HRESULT         __fastcall get_Objects(Thinfinity_tlb::IJSObjects** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSObjectsPtr __fastcall get_Objects(void);
  HRESULT         __fastcall FireEvent(BSTR Name/*[in]*/, 
                                       Thinfinity_tlb::IJSArguments* Arguments/*[in]*/);
  HRESULT         __fastcall ApplyChanges();
  HRESULT         __fastcall ApplyModel();

  __property   BSTR            Id = {read = get_Id, write = set_Id};
  __property   Thinfinity_tlb::IJSPropertiesPtr Properties = {read = get_Properties};
  __property   Thinfinity_tlb::IJSMethodsPtr Methods = {read = get_Methods};
  __property   Thinfinity_tlb::IJSEventsPtr Events = {read = get_Events};
  __property   Thinfinity_tlb::IJSObjectsPtr Objects = {read = get_Objects};
};
typedef IJSObjectDispT<IJSObject> IJSObjectDisp;

// *********************************************************************//
// DispIntf:  IJSObjectEvents
// Flags:     (4096) Dispatchable
// GUID:      {A3D640E8-CD18-4196-A1A2-C87C82B0F88B}
// *********************************************************************//
template <class T>
class IJSObjectEventsDispT : public TAutoDriver<IJSObjectEvents>
{
public:
  IJSObjectEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnExecuteMethod(Thinfinity_tlb::IJSObject* Caller/*[in]*/, 
                                             Thinfinity_tlb::IJSMethod* Method/*[in]*/);
  void            __fastcall OnPropertyChange(Thinfinity_tlb::IJSObject* Caller/*[in]*/, 
                                              Thinfinity_tlb::IJSProperty* Prop/*[in]*/);

};
typedef IJSObjectEventsDispT<IJSObjectEvents> IJSObjectEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSObjects
// Interface: IJSObjects
// *********************************************************************//
template <class T /* IJSObjects */ >
class TCOMIJSObjectsT : public TComInterface<IJSObjects>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSObjectsT() {}
  TCOMIJSObjectsT(IJSObjects *intf, bool addRef = false) : TComInterface<IJSObjects>(intf, addRef) {}
  TCOMIJSObjectsT(const TCOMIJSObjectsT& src) : TComInterface<IJSObjects>(src) {}
  TCOMIJSObjectsT& operator=(const TCOMIJSObjectsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSObject** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSObject* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Add(BSTR Id/*[in]*/, Thinfinity_tlb::IJSObject** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSObject* __fastcall Add(BSTR Id/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSObject* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIJSObjectsT<IJSObjects> TCOMIJSObjects;

// *********************************************************************//
// DispIntf:  IJSObjects
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2406011-568E-4EAC-B95C-EF29E4806B86}
// *********************************************************************//
template<class T>
class IJSObjectsDispT : public TAutoDriver<IJSObjects>
{
public:
  IJSObjectsDispT(){}

  IJSObjectsDispT(IJSObjects *pintf)
  {
    TAutoDriver<IJSObjects>::Bind(pintf, false);
  }

  IJSObjectsDispT(IJSObjectsPtr pintf)
  {
    TAutoDriver<IJSObjects>::Bind(pintf, true);
  }

  IJSObjectsDispT& operator=(IJSObjects *pintf)
  {
    TAutoDriver<IJSObjects>::Bind(pintf, false);
    return *this;
  }

  IJSObjectsDispT& operator=(IJSObjectsPtr pintf)
  {
    TAutoDriver<IJSObjects>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSObjects));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSObjects);
  }

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSObject** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSObject* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(BSTR Id/*[in]*/, Thinfinity_tlb::IJSObject** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSObject* __fastcall Add(BSTR Id/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSObject* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef IJSObjectsDispT<IJSObjects> IJSObjectsDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSProperty
// Interface: IJSProperty
// *********************************************************************//
template <class T /* IJSProperty */ >
class TCOMIJSPropertyT : public TComInterface<IJSProperty>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSPropertyT() {}
  TCOMIJSPropertyT(IJSProperty *intf, bool addRef = false) : TComInterface<IJSProperty>(intf, addRef) {}
  TCOMIJSPropertyT(const TCOMIJSPropertyT& src) : TComInterface<IJSProperty>(src) {}
  TCOMIJSPropertyT& operator=(const TCOMIJSPropertyT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                                   Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSProperty* __fastcall OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/);
  HRESULT         __fastcall OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                                   Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSProperty* __fastcall OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/);

  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
};
typedef TCOMIJSPropertyT<IJSProperty> TCOMIJSProperty;

// *********************************************************************//
// DispIntf:  IJSProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F95C0E9-E7BF-48C9-AA35-88AD0149109B}
// *********************************************************************//
template<class T>
class IJSPropertyDispT : public TAutoDriver<IJSProperty>
{
public:
  IJSPropertyDispT(){}

  IJSPropertyDispT(IJSProperty *pintf)
  {
    TAutoDriver<IJSProperty>::Bind(pintf, false);
  }

  IJSPropertyDispT(IJSPropertyPtr pintf)
  {
    TAutoDriver<IJSProperty>::Bind(pintf, true);
  }

  IJSPropertyDispT& operator=(IJSProperty *pintf)
  {
    TAutoDriver<IJSProperty>::Bind(pintf, false);
    return *this;
  }

  IJSPropertyDispT& operator=(IJSPropertyPtr pintf)
  {
    TAutoDriver<IJSProperty>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSProperty));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSProperty);
  }

  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT         __fastcall set_ReadOnly(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                                   Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSProperty* __fastcall OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/);
  HRESULT         __fastcall OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                                   Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSProperty* __fastcall OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/);
  Thinfinity_tlb::IJSDataType __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/);
  HRESULT         __fastcall get_RawValue(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_RawValue(void);
  HRESULT         __fastcall set_RawValue(VARIANT Value/*[in]*/);
  HRESULT         __fastcall get_AsString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsString(void);
  HRESULT         __fastcall set_AsString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_AsInt(long* Value/*[out,retval]*/);
  long            __fastcall get_AsInt(void);
  HRESULT         __fastcall set_AsInt(long Value/*[in]*/);
  HRESULT         __fastcall get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AsBool(void);
  HRESULT         __fastcall set_AsBool(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AsFloat(float* Value/*[out,retval]*/);
  float           __fastcall get_AsFloat(void);
  HRESULT         __fastcall set_AsFloat(float Value/*[in]*/);
  HRESULT         __fastcall get_AsJSON(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsJSON(void);
  HRESULT         __fastcall set_AsJSON(BSTR Value/*[in]*/);

  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};

  __property   BSTR            Name = {read = get_Name, write = set_Name};

  __property   Thinfinity_tlb::IJSDataType DataType = {read = get_DataType, write = set_DataType};
  __property   BSTR            AsString = {read = get_AsString, write = set_AsString};
  __property   long            AsInt = {read = get_AsInt, write = set_AsInt};
  __property   VARIANT_BOOL    AsBool = {read = get_AsBool, write = set_AsBool};
  __property   float           AsFloat = {read = get_AsFloat, write = set_AsFloat};
  __property   BSTR            AsJSON = {read = get_AsJSON, write = set_AsJSON};
};
typedef IJSPropertyDispT<IJSProperty> IJSPropertyDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSProperties
// Interface: IJSProperties
// *********************************************************************//
template <class T /* IJSProperties */ >
class TCOMIJSPropertiesT : public TComInterface<IJSProperties>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSPropertiesT() {}
  TCOMIJSPropertiesT(IJSProperties *intf, bool addRef = false) : TComInterface<IJSProperties>(intf, addRef) {}
  TCOMIJSPropertiesT(const TCOMIJSPropertiesT& src) : TComInterface<IJSProperties>(src) {}
  TCOMIJSPropertiesT& operator=(const TCOMIJSPropertiesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSProperty** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSProperty* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, 
                                 Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSProperty* __fastcall Add(BSTR Name/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSProperty* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIJSPropertiesT<IJSProperties> TCOMIJSProperties;

// *********************************************************************//
// DispIntf:  IJSProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FCBB688F-8FB2-42C1-86FC-0AAF3B2A500C}
// *********************************************************************//
template<class T>
class IJSPropertiesDispT : public TAutoDriver<IJSProperties>
{
public:
  IJSPropertiesDispT(){}

  IJSPropertiesDispT(IJSProperties *pintf)
  {
    TAutoDriver<IJSProperties>::Bind(pintf, false);
  }

  IJSPropertiesDispT(IJSPropertiesPtr pintf)
  {
    TAutoDriver<IJSProperties>::Bind(pintf, true);
  }

  IJSPropertiesDispT& operator=(IJSProperties *pintf)
  {
    TAutoDriver<IJSProperties>::Bind(pintf, false);
    return *this;
  }

  IJSPropertiesDispT& operator=(IJSPropertiesPtr pintf)
  {
    TAutoDriver<IJSProperties>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSProperties));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSProperties);
  }

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSProperty** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSProperty* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, 
                                 Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSProperty* __fastcall Add(BSTR Name/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSProperty* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef IJSPropertiesDispT<IJSProperties> IJSPropertiesDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSArgument
// Interface: IJSArgument
// *********************************************************************//
template <class T /* IJSArgument */ >
class TCOMIJSArgumentT : public TComInterface<IJSArgument>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSArgumentT() {}
  TCOMIJSArgumentT(IJSArgument *intf, bool addRef = false) : TComInterface<IJSArgument>(intf, addRef) {}
  TCOMIJSArgumentT(const TCOMIJSArgumentT& src) : TComInterface<IJSArgument>(src) {}
  TCOMIJSArgumentT& operator=(const TCOMIJSArgumentT& src) { Bind(src, true); return *this;}


};
typedef TCOMIJSArgumentT<IJSArgument> TCOMIJSArgument;

// *********************************************************************//
// DispIntf:  IJSArgument
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F8C4462-D7B5-4696-BAD5-16DFAA6E2601}
// *********************************************************************//
template<class T>
class IJSArgumentDispT : public TAutoDriver<IJSArgument>
{
public:
  IJSArgumentDispT(){}

  IJSArgumentDispT(IJSArgument *pintf)
  {
    TAutoDriver<IJSArgument>::Bind(pintf, false);
  }

  IJSArgumentDispT(IJSArgumentPtr pintf)
  {
    TAutoDriver<IJSArgument>::Bind(pintf, true);
  }

  IJSArgumentDispT& operator=(IJSArgument *pintf)
  {
    TAutoDriver<IJSArgument>::Bind(pintf, false);
    return *this;
  }

  IJSArgumentDispT& operator=(IJSArgumentPtr pintf)
  {
    TAutoDriver<IJSArgument>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSArgument));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSArgument);
  }

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/);
  Thinfinity_tlb::IJSDataType __fastcall get_DataType(void);
  HRESULT         __fastcall set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/);
  HRESULT         __fastcall get_RawValue(VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall get_RawValue(void);
  HRESULT         __fastcall set_RawValue(VARIANT Value/*[in]*/);
  HRESULT         __fastcall get_AsString(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsString(void);
  HRESULT         __fastcall set_AsString(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_AsInt(long* Value/*[out,retval]*/);
  long            __fastcall get_AsInt(void);
  HRESULT         __fastcall set_AsInt(long Value/*[in]*/);
  HRESULT         __fastcall get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AsBool(void);
  HRESULT         __fastcall set_AsBool(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AsFloat(float* Value/*[out,retval]*/);
  float           __fastcall get_AsFloat(void);
  HRESULT         __fastcall set_AsFloat(float Value/*[in]*/);
  HRESULT         __fastcall get_AsJSON(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_AsJSON(void);
  HRESULT         __fastcall set_AsJSON(BSTR Value/*[in]*/);


  __property   BSTR            Name = {read = get_Name, write = set_Name};

  __property   Thinfinity_tlb::IJSDataType DataType = {read = get_DataType, write = set_DataType};
  __property   BSTR            AsString = {read = get_AsString, write = set_AsString};
  __property   long            AsInt = {read = get_AsInt, write = set_AsInt};
  __property   VARIANT_BOOL    AsBool = {read = get_AsBool, write = set_AsBool};
  __property   float           AsFloat = {read = get_AsFloat, write = set_AsFloat};
  __property   BSTR            AsJSON = {read = get_AsJSON, write = set_AsJSON};
};
typedef IJSArgumentDispT<IJSArgument> IJSArgumentDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSArguments
// Interface: IJSArguments
// *********************************************************************//
template <class T /* IJSArguments */ >
class TCOMIJSArgumentsT : public TComInterface<IJSArguments>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSArgumentsT() {}
  TCOMIJSArgumentsT(IJSArguments *intf, bool addRef = false) : TComInterface<IJSArguments>(intf, addRef) {}
  TCOMIJSArgumentsT(const TCOMIJSArgumentsT& src) : TComInterface<IJSArguments>(src) {}
  TCOMIJSArgumentsT& operator=(const TCOMIJSArgumentsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSArgument** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSArgument* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, 
                                 Thinfinity_tlb::IJSArgument** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSArgument* __fastcall Add(BSTR Name/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSArgument* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIJSArgumentsT<IJSArguments> TCOMIJSArguments;

// *********************************************************************//
// DispIntf:  IJSArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC097EF5-6D8A-4C80-A2AD-382FDC75E901}
// *********************************************************************//
template<class T>
class IJSArgumentsDispT : public TAutoDriver<IJSArguments>
{
public:
  IJSArgumentsDispT(){}

  IJSArgumentsDispT(IJSArguments *pintf)
  {
    TAutoDriver<IJSArguments>::Bind(pintf, false);
  }

  IJSArgumentsDispT(IJSArgumentsPtr pintf)
  {
    TAutoDriver<IJSArguments>::Bind(pintf, true);
  }

  IJSArgumentsDispT& operator=(IJSArguments *pintf)
  {
    TAutoDriver<IJSArguments>::Bind(pintf, false);
    return *this;
  }

  IJSArgumentsDispT& operator=(IJSArgumentsPtr pintf)
  {
    TAutoDriver<IJSArguments>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSArguments));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSArguments);
  }

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSArgument** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSArgument* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, 
                                 Thinfinity_tlb::IJSArgument** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSArgument* __fastcall Add(BSTR Name/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSArgument* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef IJSArgumentsDispT<IJSArguments> IJSArgumentsDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSMethod
// Interface: IJSMethod
// *********************************************************************//
template <class T /* IJSMethod */ >
class TCOMIJSMethodT : public TComInterface<IJSMethod>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSMethodT() {}
  TCOMIJSMethodT(IJSMethod *intf, bool addRef = false) : TComInterface<IJSMethod>(intf, addRef) {}
  TCOMIJSMethodT(const TCOMIJSMethodT& src) : TComInterface<IJSMethod>(src) {}
  TCOMIJSMethodT& operator=(const TCOMIJSMethodT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSArgumentsPtr __fastcall get_Arguments(void);
  HRESULT         __fastcall get_ReturnValue(Thinfinity_tlb::IJSValue** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSValuePtr __fastcall get_ReturnValue(void);
  HRESULT         __fastcall AddArgument(BSTR Name/*[in]*/, 
                                         Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                                         Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSMethod* __fastcall AddArgument(BSTR Name/*[in]*/, 
                                                    Thinfinity_tlb::IJSDataType DataType/*[in]*/);
  HRESULT         __fastcall OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/, 
                                    Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSMethod* __fastcall OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Thinfinity_tlb::IJSArgumentsPtr Arguments = {read = get_Arguments};
  __property   Thinfinity_tlb::IJSValuePtr ReturnValue = {read = get_ReturnValue};
};
typedef TCOMIJSMethodT<IJSMethod> TCOMIJSMethod;

// *********************************************************************//
// DispIntf:  IJSMethod
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C45D6A8F-AD4A-47BB-AC3A-C125D6D5D27E}
// *********************************************************************//
template<class T>
class IJSMethodDispT : public TAutoDriver<IJSMethod>
{
public:
  IJSMethodDispT(){}

  IJSMethodDispT(IJSMethod *pintf)
  {
    TAutoDriver<IJSMethod>::Bind(pintf, false);
  }

  IJSMethodDispT(IJSMethodPtr pintf)
  {
    TAutoDriver<IJSMethod>::Bind(pintf, true);
  }

  IJSMethodDispT& operator=(IJSMethod *pintf)
  {
    TAutoDriver<IJSMethod>::Bind(pintf, false);
    return *this;
  }

  IJSMethodDispT& operator=(IJSMethodPtr pintf)
  {
    TAutoDriver<IJSMethod>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSMethod));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSMethod);
  }

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSArgumentsPtr __fastcall get_Arguments(void);
  HRESULT         __fastcall get_ReturnValue(Thinfinity_tlb::IJSValue** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSValuePtr __fastcall get_ReturnValue(void);
  HRESULT         __fastcall AddArgument(BSTR Name/*[in]*/, 
                                         Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                                         Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSMethod* __fastcall AddArgument(BSTR Name/*[in]*/, 
                                                    Thinfinity_tlb::IJSDataType DataType/*[in]*/);
  HRESULT         __fastcall OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/, 
                                    Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSMethod* __fastcall OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Thinfinity_tlb::IJSArgumentsPtr Arguments = {read = get_Arguments};
  __property   Thinfinity_tlb::IJSValuePtr ReturnValue = {read = get_ReturnValue};
};
typedef IJSMethodDispT<IJSMethod> IJSMethodDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSMethods
// Interface: IJSMethods
// *********************************************************************//
template <class T /* IJSMethods */ >
class TCOMIJSMethodsT : public TComInterface<IJSMethods>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSMethodsT() {}
  TCOMIJSMethodsT(IJSMethods *intf, bool addRef = false) : TComInterface<IJSMethods>(intf, addRef) {}
  TCOMIJSMethodsT(const TCOMIJSMethodsT& src) : TComInterface<IJSMethods>(src) {}
  TCOMIJSMethodsT& operator=(const TCOMIJSMethodsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSMethod** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSMethod* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, 
                                 Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSMethod* __fastcall Add(BSTR Name/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSMethod* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIJSMethodsT<IJSMethods> TCOMIJSMethods;

// *********************************************************************//
// DispIntf:  IJSMethods
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4CB461F-586E-4121-ABD7-345B87BC423A}
// *********************************************************************//
template<class T>
class IJSMethodsDispT : public TAutoDriver<IJSMethods>
{
public:
  IJSMethodsDispT(){}

  IJSMethodsDispT(IJSMethods *pintf)
  {
    TAutoDriver<IJSMethods>::Bind(pintf, false);
  }

  IJSMethodsDispT(IJSMethodsPtr pintf)
  {
    TAutoDriver<IJSMethods>::Bind(pintf, true);
  }

  IJSMethodsDispT& operator=(IJSMethods *pintf)
  {
    TAutoDriver<IJSMethods>::Bind(pintf, false);
    return *this;
  }

  IJSMethodsDispT& operator=(IJSMethodsPtr pintf)
  {
    TAutoDriver<IJSMethods>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSMethods));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSMethods);
  }

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSMethod** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSMethod* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, 
                                 Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSMethod* __fastcall Add(BSTR Name/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSMethod* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef IJSMethodsDispT<IJSMethods> IJSMethodsDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSEvent
// Interface: IJSEvent
// *********************************************************************//
template <class T /* IJSEvent */ >
class TCOMIJSEventT : public TComInterface<IJSEvent>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSEventT() {}
  TCOMIJSEventT(IJSEvent *intf, bool addRef = false) : TComInterface<IJSEvent>(intf, addRef) {}
  TCOMIJSEventT(const TCOMIJSEventT& src) : TComInterface<IJSEvent>(src) {}
  TCOMIJSEventT& operator=(const TCOMIJSEventT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSArgumentsPtr __fastcall get_Arguments(void);
  HRESULT         __fastcall AddArgument(BSTR Name/*[in]*/, 
                                         Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                                         Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall AddArgument(BSTR Name/*[in]*/, 
                                                   Thinfinity_tlb::IJSDataType DataType/*[in]*/);
  HRESULT         __fastcall ArgumentAsNull(VARIANT Index/*[in]*/, 
                                            Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsNull(VARIANT Index/*[in]*/);
  HRESULT         __fastcall ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                              Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/, 
                                           Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/);
  HRESULT         __fastcall ArgumentAsBool(VARIANT Index/*[in]*/, VARIANT_BOOL Value/*[in]*/, 
                                            Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsBool(VARIANT Index/*[in]*/, 
                                                      VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/, 
                                             Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/);
  HRESULT         __fastcall ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                            Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall Fire(void);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Thinfinity_tlb::IJSArgumentsPtr Arguments = {read = get_Arguments};
};
typedef TCOMIJSEventT<IJSEvent> TCOMIJSEvent;

// *********************************************************************//
// DispIntf:  IJSEvent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8B66EACD-9619-43CF-9196-DCDA17F5500E}
// *********************************************************************//
template<class T>
class IJSEventDispT : public TAutoDriver<IJSEvent>
{
public:
  IJSEventDispT(){}

  IJSEventDispT(IJSEvent *pintf)
  {
    TAutoDriver<IJSEvent>::Bind(pintf, false);
  }

  IJSEventDispT(IJSEventPtr pintf)
  {
    TAutoDriver<IJSEvent>::Bind(pintf, true);
  }

  IJSEventDispT& operator=(IJSEvent *pintf)
  {
    TAutoDriver<IJSEvent>::Bind(pintf, false);
    return *this;
  }

  IJSEventDispT& operator=(IJSEventPtr pintf)
  {
    TAutoDriver<IJSEvent>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSEvent));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSEvent);
  }

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSArgumentsPtr __fastcall get_Arguments(void);
  HRESULT         __fastcall AddArgument(BSTR Name/*[in]*/, 
                                         Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                                         Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall AddArgument(BSTR Name/*[in]*/, 
                                                   Thinfinity_tlb::IJSDataType DataType/*[in]*/);
  HRESULT         __fastcall ArgumentAsNull(VARIANT Index/*[in]*/, 
                                            Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsNull(VARIANT Index/*[in]*/);
  HRESULT         __fastcall ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                              Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/, 
                                           Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/);
  HRESULT         __fastcall ArgumentAsBool(VARIANT Index/*[in]*/, VARIANT_BOOL Value/*[in]*/, 
                                            Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsBool(VARIANT Index/*[in]*/, 
                                                      VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/, 
                                             Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/);
  HRESULT         __fastcall ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                            Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall Fire();

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   Thinfinity_tlb::IJSArgumentsPtr Arguments = {read = get_Arguments};
};
typedef IJSEventDispT<IJSEvent> IJSEventDisp;

// *********************************************************************//
// SmartIntf: TCOMIJSEvents
// Interface: IJSEvents
// *********************************************************************//
template <class T /* IJSEvents */ >
class TCOMIJSEventsT : public TComInterface<IJSEvents>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIJSEventsT() {}
  TCOMIJSEventsT(IJSEvents *intf, bool addRef = false) : TComInterface<IJSEvents>(intf, addRef) {}
  TCOMIJSEventsT(const TCOMIJSEventsT& src) : TComInterface<IJSEvents>(src) {}
  TCOMIJSEventsT& operator=(const TCOMIJSEventsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSEvent** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, 
                                 Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall Add(BSTR Name/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSEvent* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIJSEventsT<IJSEvents> TCOMIJSEvents;

// *********************************************************************//
// DispIntf:  IJSEvents
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6AE952B3-B6DA-4C81-80FF-D0A162E11D02}
// *********************************************************************//
template<class T>
class IJSEventsDispT : public TAutoDriver<IJSEvents>
{
public:
  IJSEventsDispT(){}

  IJSEventsDispT(IJSEvents *pintf)
  {
    TAutoDriver<IJSEvents>::Bind(pintf, false);
  }

  IJSEventsDispT(IJSEventsPtr pintf)
  {
    TAutoDriver<IJSEvents>::Bind(pintf, true);
  }

  IJSEventsDispT& operator=(IJSEvents *pintf)
  {
    TAutoDriver<IJSEvents>::Bind(pintf, false);
    return *this;
  }

  IJSEventsDispT& operator=(IJSEventsPtr pintf)
  {
    TAutoDriver<IJSEvents>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_JSEvents));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_JSEvents);
  }

  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Thinfinity_tlb::IJSEvent** Value/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall Clear();
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, 
                                 Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/);
  Thinfinity_tlb::IJSEvent* __fastcall Add(BSTR Name/*[in]*/);
  HRESULT         __fastcall Remove(Thinfinity_tlb::IJSEvent* Item/*[in]*/);

  __property   long            Count = {read = get_Count};
};
typedef IJSEventsDispT<IJSEvents> IJSEventsDisp;

typedef TComInterface<IJSBinding>  TCOMIJSBinding;

// *********************************************************************//
// DispIntf:  IJSBinding
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ACFC2953-37F1-479E-B405-D0BB75E156E6}
// *********************************************************************//
template<class T>
class IJSBindingDispT : public TAutoDriver<IJSBinding>
{
public:
  IJSBindingDispT(){}

  IJSBindingDispT(IJSBinding *pintf)
  {
    TAutoDriver<IJSBinding>::Bind(pintf, false);
  }

  IJSBindingDispT(IJSBindingPtr pintf)
  {
    TAutoDriver<IJSBinding>::Bind(pintf, true);
  }

  IJSBindingDispT& operator=(IJSBinding *pintf)
  {
    TAutoDriver<IJSBinding>::Bind(pintf, false);
    return *this;
  }

  IJSBindingDispT& operator=(IJSBindingPtr pintf)
  {
    TAutoDriver<IJSBinding>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Set_(Thinfinity_tlb::IJSObject* Parent/*[in]*/, 
                                  Thinfinity_tlb::IJSProperty* Prop/*[in]*/);

};
typedef IJSBindingDispT<IJSBinding> IJSBindingDisp;

typedef TComInterface<IJSCallback>  TCOMIJSCallback;

// *********************************************************************//
// DispIntf:  IJSCallback
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ADD570A0-491A-4E40-8120-57B4D1245FD3}
// *********************************************************************//
template<class T>
class IJSCallbackDispT : public TAutoDriver<IJSCallback>
{
public:
  IJSCallbackDispT(){}

  IJSCallbackDispT(IJSCallback *pintf)
  {
    TAutoDriver<IJSCallback>::Bind(pintf, false);
  }

  IJSCallbackDispT(IJSCallbackPtr pintf)
  {
    TAutoDriver<IJSCallback>::Bind(pintf, true);
  }

  IJSCallbackDispT& operator=(IJSCallback *pintf)
  {
    TAutoDriver<IJSCallback>::Bind(pintf, false);
    return *this;
  }

  IJSCallbackDispT& operator=(IJSCallbackPtr pintf)
  {
    TAutoDriver<IJSCallback>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Callback(Thinfinity_tlb::IJSObject* Parent/*[in]*/, 
                                      Thinfinity_tlb::IJSMethod* Method/*[in]*/);

};
typedef IJSCallbackDispT<IJSCallback> IJSCallbackDisp;

// *********************************************************************//
// SmartIntf: TCOMIRecorder
// Interface: IRecorder
// *********************************************************************//
template <class T /* IRecorder */ >
class TCOMIRecorderT : public TComInterface<IRecorder>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRecorderT() {}
  TCOMIRecorderT(IRecorder *intf, bool addRef = false) : TComInterface<IRecorder>(intf, addRef) {}
  TCOMIRecorderT(const TCOMIRecorderT& src) : TComInterface<IRecorder>(src) {}
  TCOMIRecorderT& operator=(const TCOMIRecorderT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Filename(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Filename(void);
  HRESULT         __fastcall set_Filename(BSTR Value/*[in]*/);
  HRESULT         __fastcall Rec(BSTR Track/*[in]*/);
  HRESULT         __fastcall Play(long From/*[in]*/, long To/*[in]*/);
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall get_Position(long* Value/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_State(Thinfinity_tlb::RecorderState* Value/*[out,retval]*/);
  Thinfinity_tlb::RecorderState __fastcall get_State(void);
  HRESULT         __fastcall get_Options(unsigned_long* Value/*[out,retval]*/);
  unsigned_long   __fastcall get_Options(void);
  HRESULT         __fastcall set_Options(unsigned_long Value/*[in]*/);
  HRESULT         __fastcall get_Tracks(Thinfinity_tlb::IRecTracks** Value/*[out,retval]*/);
  Thinfinity_tlb::IRecTracksPtr __fastcall get_Tracks(void);

  __property   BSTR            Filename = {read = get_Filename, write = set_Filename};
  __property   long            Position = {read = get_Position};
  __property   long            Count = {read = get_Count};
  __property   Thinfinity_tlb::RecorderState State = {read = get_State};
  __property   unsigned_long   Options = {read = get_Options, write = set_Options};
  __property   Thinfinity_tlb::IRecTracksPtr Tracks = {read = get_Tracks};
};
typedef TCOMIRecorderT<IRecorder> TCOMIRecorder;

// *********************************************************************//
// DispIntf:  IRecorder
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D89DA2B6-B7BF-4065-80F5-6D78B331C7DD}
// *********************************************************************//
template<class T>
class IRecorderDispT : public TAutoDriver<IRecorder>
{
public:
  IRecorderDispT(){}

  IRecorderDispT(IRecorder *pintf)
  {
    TAutoDriver<IRecorder>::Bind(pintf, false);
  }

  IRecorderDispT(IRecorderPtr pintf)
  {
    TAutoDriver<IRecorder>::Bind(pintf, true);
  }

  IRecorderDispT& operator=(IRecorder *pintf)
  {
    TAutoDriver<IRecorder>::Bind(pintf, false);
    return *this;
  }

  IRecorderDispT& operator=(IRecorderPtr pintf)
  {
    TAutoDriver<IRecorder>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Recorder));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Recorder);
  }

  HRESULT         __fastcall get_Filename(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Filename(void);
  HRESULT         __fastcall set_Filename(BSTR Value/*[in]*/);
  HRESULT         __fastcall Rec(BSTR Track/*[in]*/);
  HRESULT         __fastcall Play(long From/*[in]*/, long To/*[in]*/);
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall get_Position(long* Value/*[out,retval]*/);
  long            __fastcall get_Position(void);
  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_State(Thinfinity_tlb::RecorderState* Value/*[out,retval]*/);
  Thinfinity_tlb::RecorderState __fastcall get_State(void);
  HRESULT         __fastcall get_Options(unsigned_long* Value/*[out,retval]*/);
  unsigned_long   __fastcall get_Options(void);
  HRESULT         __fastcall set_Options(unsigned_long Value/*[in]*/);
  HRESULT         __fastcall get_Tracks(Thinfinity_tlb::IRecTracks** Value/*[out,retval]*/);
  Thinfinity_tlb::IRecTracksPtr __fastcall get_Tracks(void);

  __property   BSTR            Filename = {read = get_Filename, write = set_Filename};
  __property   long            Position = {read = get_Position};
  __property   long            Count = {read = get_Count};
  __property   Thinfinity_tlb::RecorderState State = {read = get_State};
  __property   unsigned_long   Options = {read = get_Options, write = set_Options};
  __property   Thinfinity_tlb::IRecTracksPtr Tracks = {read = get_Tracks};
};
typedef IRecorderDispT<IRecorder> IRecorderDisp;

// *********************************************************************//
// SmartIntf: TCOMIRecTrack
// Interface: IRecTrack
// *********************************************************************//
template <class T /* IRecTrack */ >
class TCOMIRecTrackT : public TComInterface<IRecTrack>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRecTrackT() {}
  TCOMIRecTrackT(IRecTrack *intf, bool addRef = false) : TComInterface<IRecTrack>(intf, addRef) {}
  TCOMIRecTrackT(const TCOMIRecTrackT& src) : TComInterface<IRecTrack>(src) {}
  TCOMIRecTrackT& operator=(const TCOMIRecTrackT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Position(long* Value/*[out,retval]*/);
  long            __fastcall get_Position(void);

  __property   BSTR            Name = {read = get_Name};
  __property   long            Position = {read = get_Position};
};
typedef TCOMIRecTrackT<IRecTrack> TCOMIRecTrack;

// *********************************************************************//
// DispIntf:  IRecTrack
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D4744AE1-70CB-43DD-BEA5-A5310B2E24C6}
// *********************************************************************//
template<class T>
class IRecTrackDispT : public TAutoDriver<IRecTrack>
{
public:
  IRecTrackDispT(){}

  IRecTrackDispT(IRecTrack *pintf)
  {
    TAutoDriver<IRecTrack>::Bind(pintf, false);
  }

  IRecTrackDispT(IRecTrackPtr pintf)
  {
    TAutoDriver<IRecTrack>::Bind(pintf, true);
  }

  IRecTrackDispT& operator=(IRecTrack *pintf)
  {
    TAutoDriver<IRecTrack>::Bind(pintf, false);
    return *this;
  }

  IRecTrackDispT& operator=(IRecTrackPtr pintf)
  {
    TAutoDriver<IRecTrack>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RecTrack));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RecTrack);
  }

  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Position(long* Value/*[out,retval]*/);
  long            __fastcall get_Position(void);

  __property   BSTR            Name = {read = get_Name};
  __property   long            Position = {read = get_Position};
};
typedef IRecTrackDispT<IRecTrack> IRecTrackDisp;

// *********************************************************************//
// SmartIntf: TCOMIRecTracks
// Interface: IRecTracks
// *********************************************************************//
template <class T /* IRecTracks */ >
class TCOMIRecTracksT : public TComInterface<IRecTracks>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRecTracksT() {}
  TCOMIRecTracksT(IRecTracks *intf, bool addRef = false) : TComInterface<IRecTracks>(intf, addRef) {}
  TCOMIRecTracksT(const TCOMIRecTracksT& src) : TComInterface<IRecTracks>(src) {}
  TCOMIRecTracksT& operator=(const TCOMIRecTracksT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Thinfinity_tlb::IRecTrack** Value/*[out,retval]*/);
  Thinfinity_tlb::IRecTrack* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIRecTracksT<IRecTracks> TCOMIRecTracks;

// *********************************************************************//
// DispIntf:  IRecTracks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB45B615-9309-471E-A455-3FE93F88E674}
// *********************************************************************//
template<class T>
class IRecTracksDispT : public TAutoDriver<IRecTracks>
{
public:
  IRecTracksDispT(){}

  IRecTracksDispT(IRecTracks *pintf)
  {
    TAutoDriver<IRecTracks>::Bind(pintf, false);
  }

  IRecTracksDispT(IRecTracksPtr pintf)
  {
    TAutoDriver<IRecTracks>::Bind(pintf, true);
  }

  IRecTracksDispT& operator=(IRecTracks *pintf)
  {
    TAutoDriver<IRecTracks>::Bind(pintf, false);
    return *this;
  }

  IRecTracksDispT& operator=(IRecTracksPtr pintf)
  {
    TAutoDriver<IRecTracks>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RecTracks));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RecTracks);
  }

  HRESULT         __fastcall get_Item(long Index/*[in]*/, 
                                      Thinfinity_tlb::IRecTrack** Value/*[out,retval]*/);
  Thinfinity_tlb::IRecTrack* __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* Value/*[out,retval]*/);
  long            __fastcall get_Count(void);

  __property   long            Count = {read = get_Count};
};
typedef IRecTracksDispT<IRecTracks> IRecTracksDisp;

// *********************************************************************//
// SmartIntf: TCOMIFileSystemFilter
// Interface: IFileSystemFilter
// *********************************************************************//
template <class T /* IFileSystemFilter */ >
class TCOMIFileSystemFilterT : public TComInterface<IFileSystemFilter>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIFileSystemFilterT() {}
  TCOMIFileSystemFilterT(IFileSystemFilter *intf, bool addRef = false) : TComInterface<IFileSystemFilter>(intf, addRef) {}
  TCOMIFileSystemFilterT(const TCOMIFileSystemFilterT& src) : TComInterface<IFileSystemFilter>(src) {}
  TCOMIFileSystemFilterT& operator=(const TCOMIFileSystemFilterT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_User(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_User(void);
  HRESULT         __fastcall set_User(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CfgFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CfgFile(void);
  HRESULT         __fastcall set_CfgFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);

  __property   BSTR            User = {read = get_User, write = set_User};
  __property   BSTR            CfgFile = {read = get_CfgFile, write = set_CfgFile};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
};
typedef TCOMIFileSystemFilterT<IFileSystemFilter> TCOMIFileSystemFilter;

// *********************************************************************//
// DispIntf:  IFileSystemFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3FE99D2F-0CFC-43D1-B762-0C7C15EB872E}
// *********************************************************************//
template<class T>
class IFileSystemFilterDispT : public TAutoDriver<IFileSystemFilter>
{
public:
  IFileSystemFilterDispT(){}

  IFileSystemFilterDispT(IFileSystemFilter *pintf)
  {
    TAutoDriver<IFileSystemFilter>::Bind(pintf, false);
  }

  IFileSystemFilterDispT(IFileSystemFilterPtr pintf)
  {
    TAutoDriver<IFileSystemFilter>::Bind(pintf, true);
  }

  IFileSystemFilterDispT& operator=(IFileSystemFilter *pintf)
  {
    TAutoDriver<IFileSystemFilter>::Bind(pintf, false);
    return *this;
  }

  IFileSystemFilterDispT& operator=(IFileSystemFilterPtr pintf)
  {
    TAutoDriver<IFileSystemFilter>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_FileSystemFilter));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_FileSystemFilter);
  }

  HRESULT         __fastcall get_User(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_User(void);
  HRESULT         __fastcall set_User(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CfgFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CfgFile(void);
  HRESULT         __fastcall set_CfgFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);

  __property   BSTR            User = {read = get_User, write = set_User};
  __property   BSTR            CfgFile = {read = get_CfgFile, write = set_CfgFile};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
};
typedef IFileSystemFilterDispT<IFileSystemFilter> IFileSystemFilterDisp;

// *********************************************************************//
// SmartIntf: TCOMIRegistryFilter
// Interface: IRegistryFilter
// *********************************************************************//
template <class T /* IRegistryFilter */ >
class TCOMIRegistryFilterT : public TComInterface<IRegistryFilter>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRegistryFilterT() {}
  TCOMIRegistryFilterT(IRegistryFilter *intf, bool addRef = false) : TComInterface<IRegistryFilter>(intf, addRef) {}
  TCOMIRegistryFilterT(const TCOMIRegistryFilterT& src) : TComInterface<IRegistryFilter>(src) {}
  TCOMIRegistryFilterT& operator=(const TCOMIRegistryFilterT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_User(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_User(void);
  HRESULT         __fastcall set_User(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CfgFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CfgFile(void);
  HRESULT         __fastcall set_CfgFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);

  __property   BSTR            User = {read = get_User, write = set_User};
  __property   BSTR            CfgFile = {read = get_CfgFile, write = set_CfgFile};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
};
typedef TCOMIRegistryFilterT<IRegistryFilter> TCOMIRegistryFilter;

// *********************************************************************//
// DispIntf:  IRegistryFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4834F840-915B-488B-ADEA-98890A04CEE6}
// *********************************************************************//
template<class T>
class IRegistryFilterDispT : public TAutoDriver<IRegistryFilter>
{
public:
  IRegistryFilterDispT(){}

  IRegistryFilterDispT(IRegistryFilter *pintf)
  {
    TAutoDriver<IRegistryFilter>::Bind(pintf, false);
  }

  IRegistryFilterDispT(IRegistryFilterPtr pintf)
  {
    TAutoDriver<IRegistryFilter>::Bind(pintf, true);
  }

  IRegistryFilterDispT& operator=(IRegistryFilter *pintf)
  {
    TAutoDriver<IRegistryFilter>::Bind(pintf, false);
    return *this;
  }

  IRegistryFilterDispT& operator=(IRegistryFilterPtr pintf)
  {
    TAutoDriver<IRegistryFilter>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RegistryFilter));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RegistryFilter);
  }

  HRESULT         __fastcall get_User(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_User(void);
  HRESULT         __fastcall set_User(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CfgFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CfgFile(void);
  HRESULT         __fastcall set_CfgFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall set_Active(VARIANT_BOOL Value/*[in]*/);

  __property   BSTR            User = {read = get_User, write = set_User};
  __property   BSTR            CfgFile = {read = get_CfgFile, write = set_CfgFile};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
};
typedef IRegistryFilterDispT<IRegistryFilter> IRegistryFilterDisp;

// *********************************************************************//
// SmartIntf: TCOMIVirtualUI
// Interface: IVirtualUI
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::Start(long Timeout/*[in]*/, VARIANT_BOOL* OutRetVal/*[out,retval]*/)
{
  return (*this)->Start(Timeout, OutRetVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVirtualUIT<T>::Start(long Timeout/*[in]*/)
{
  VARIANT_BOOL OutRetVal;
  OLECHECK(this->Start(Timeout/*[in]*/, (VARIANT_BOOL*)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVirtualUIT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVirtualUIT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_DevMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DevMode(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVirtualUIT<T>::get_DevMode(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DevMode((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::set_DevMode(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DevMode(Value);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_StdDialogs(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_StdDialogs(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVirtualUIT<T>::get_StdDialogs(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_StdDialogs((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::set_StdDialogs(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_StdDialogs(Value);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_BrowserInfo(Thinfinity_tlb::IBrowserInfo** Value/*[out,retval]*/)
{
  return (*this)->get_BrowserInfo(Value);
}

template <class T> Thinfinity_tlb::IBrowserInfoPtr __fastcall
TCOMIVirtualUIT<T>::get_BrowserInfo(void)
{
  Thinfinity_tlb::IBrowserInfoPtr Value;
  OLECHECK(this->get_BrowserInfo((Thinfinity_tlb::IBrowserInfoPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_DevServer(Thinfinity_tlb::IDevServer** Value/*[out,retval]*/)
{
  return (*this)->get_DevServer(Value);
}

template <class T> Thinfinity_tlb::IDevServerPtr __fastcall
TCOMIVirtualUIT<T>::get_DevServer(void)
{
  Thinfinity_tlb::IDevServerPtr Value;
  OLECHECK(this->get_DevServer((Thinfinity_tlb::IDevServerPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_ClientSettings(Thinfinity_tlb::IClientSettings** Value/*[out,retval]*/)
{
  return (*this)->get_ClientSettings(Value);
}

template <class T> Thinfinity_tlb::IClientSettingsPtr __fastcall
TCOMIVirtualUIT<T>::get_ClientSettings(void)
{
  Thinfinity_tlb::IClientSettingsPtr Value;
  OLECHECK(this->get_ClientSettings((Thinfinity_tlb::IClientSettingsPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::DownloadFile(BSTR LocalFilename/*[in]*/, BSTR RemoteFilename/*[in]*/, 
                                 BSTR MimeType/*[in]*/)
{
  return (*this)->DownloadFile(LocalFilename, RemoteFilename, MimeType);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::PrintPdf(BSTR AFileName/*[in]*/)
{
  return (*this)->PrintPdf(AFileName);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::OpenLinkDlg(BSTR url/*[in]*/, BSTR caption/*[in]*/)
{
  return (*this)->OpenLinkDlg(url, caption);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::SendMessage(BSTR Data/*[in]*/)
{
  return (*this)->SendMessage(Data);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::AllowExecute(BSTR Filename/*[in]*/)
{
  return (*this)->AllowExecute(Filename);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::SetImageQualityByWnd(long Wnd/*[in]*/, BSTR Class/*[in]*/, long Quality/*[in]*/)
{
  return (*this)->SetImageQualityByWnd(Wnd, Class, Quality);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::UploadFile(BSTR ServerDirectory/*[in]*/)
{
  return (*this)->UploadFile(ServerDirectory);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/, 
                                   VARIANT_BOOL* OutRetVal/*[out,retval]*/)
{
  return (*this)->TakeScreenshot(Wnd, Filename, OutRetVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVirtualUIT<T>::TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/)
{
  VARIANT_BOOL OutRetVal;
  OLECHECK(this->TakeScreenshot(Wnd/*[in]*/, Filename/*[in]*/, (VARIANT_BOOL*)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::ShowVirtualKeyboard(void)
{
  return (*this)->ShowVirtualKeyboard();
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_Recorder(Thinfinity_tlb::IRecorder** Value/*[out,retval]*/)
{
  return (*this)->get_Recorder(Value);
}

template <class T> Thinfinity_tlb::IRecorderPtr __fastcall
TCOMIVirtualUIT<T>::get_Recorder(void)
{
  Thinfinity_tlb::IRecorderPtr Value;
  OLECHECK(this->get_Recorder((Thinfinity_tlb::IRecorderPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::PreviewPdf(BSTR AFileName/*[in]*/)
{
  return (*this)->PreviewPdf(AFileName);
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_FileSystemFilter(Thinfinity_tlb::IFileSystemFilter** Value/*[out,retval]*/)
{
  return (*this)->get_FileSystemFilter(Value);
}

template <class T> Thinfinity_tlb::IFileSystemFilterPtr __fastcall
TCOMIVirtualUIT<T>::get_FileSystemFilter(void)
{
  Thinfinity_tlb::IFileSystemFilterPtr Value;
  OLECHECK(this->get_FileSystemFilter((Thinfinity_tlb::IFileSystemFilterPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIVirtualUIT<T>::get_RegistryFilter(Thinfinity_tlb::IRegistryFilter** Value/*[out,retval]*/)
{
  return (*this)->get_RegistryFilter(Value);
}

template <class T> Thinfinity_tlb::IRegistryFilterPtr __fastcall
TCOMIVirtualUIT<T>::get_RegistryFilter(void)
{
  Thinfinity_tlb::IRegistryFilterPtr Value;
  OLECHECK(this->get_RegistryFilter((Thinfinity_tlb::IRegistryFilterPtr*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IVirtualUI
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4B85F81B-72A2-4FCD-9A6B-9CAC24B7A511}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::Start(long Timeout/*[in]*/, VARIANT_BOOL* OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Start"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Timeout /*[VT_I4:0]*/;
  return OutRetValSetterPtr(OutRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVirtualUIDispT<T>::Start(long Timeout/*[in]*/)
{
  VARIANT_BOOL OutRetVal;
  this->Start(Timeout, (VARIANT_BOOL*)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(103));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVirtualUIDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVirtualUIDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_DevMode(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevMode"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVirtualUIDispT<T>::get_DevMode(void)
{
  VARIANT_BOOL Value;
  this->get_DevMode((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::set_DevMode(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevMode"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_StdDialogs(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StdDialogs"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVirtualUIDispT<T>::get_StdDialogs(void)
{
  VARIANT_BOOL Value;
  this->get_StdDialogs((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::set_StdDialogs(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StdDialogs"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_BrowserInfo(Thinfinity_tlb::IBrowserInfo** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrowserInfo"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IBrowserInfo**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IBrowserInfoPtr __fastcall
IVirtualUIDispT<T>::get_BrowserInfo(void)
{
  Thinfinity_tlb::IBrowserInfoPtr Value;
  this->get_BrowserInfo(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_DevServer(Thinfinity_tlb::IDevServer** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DevServer"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IDevServer**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IDevServerPtr __fastcall
IVirtualUIDispT<T>::get_DevServer(void)
{
  Thinfinity_tlb::IDevServerPtr Value;
  this->get_DevServer(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_ClientSettings(Thinfinity_tlb::IClientSettings** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientSettings"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IClientSettings**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IClientSettingsPtr __fastcall
IVirtualUIDispT<T>::get_ClientSettings(void)
{
  Thinfinity_tlb::IClientSettingsPtr Value;
  this->get_ClientSettings(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::DownloadFile(BSTR LocalFilename/*[in]*/, BSTR RemoteFilename/*[in]*/, 
                                 BSTR MimeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadFile"), DISPID(112));
  TAutoArgs<3> _args;
  _args[1] = LocalFilename /*[VT_BSTR:0]*/;
  _args[2] = RemoteFilename /*[VT_BSTR:0]*/;
  _args[3] = MimeType /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::PrintPdf(BSTR AFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintPdf"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = AFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::OpenLinkDlg(BSTR url/*[in]*/, BSTR caption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenLinkDlg"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = url /*[VT_BSTR:0]*/;
  _args[2] = caption /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::SendMessage(BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMessage"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::AllowExecute(BSTR Filename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowExecute"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::SetImageQualityByWnd(long Wnd/*[in]*/, BSTR Class/*[in]*/, long Quality/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetImageQualityByWnd"), DISPID(117));
  TAutoArgs<3> _args;
  _args[1] = Wnd /*[VT_I4:0]*/;
  _args[2] = Class /*[VT_BSTR:0]*/;
  _args[3] = Quality /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::UploadFile(BSTR ServerDirectory/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UploadFile"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = ServerDirectory /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/, 
                                   VARIANT_BOOL* OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TakeScreenshot"), DISPID(119));
  TAutoArgs<2> _args;
  _args[1] = Wnd /*[VT_I4:0]*/;
  _args[2] = Filename /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(OutRetVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVirtualUIDispT<T>::TakeScreenshot(long Wnd/*[in]*/, BSTR Filename/*[in]*/)
{
  VARIANT_BOOL OutRetVal;
  this->TakeScreenshot(Wnd, Filename, (VARIANT_BOOL*)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::ShowVirtualKeyboard()
{
  _TDispID _dispid(*this, OLETEXT("ShowVirtualKeyboard"), DISPID(120));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_Recorder(Thinfinity_tlb::IRecorder** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Recorder"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IRecorder**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IRecorderPtr __fastcall
IVirtualUIDispT<T>::get_Recorder(void)
{
  Thinfinity_tlb::IRecorderPtr Value;
  this->get_Recorder(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::PreviewPdf(BSTR AFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviewPdf"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = AFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_FileSystemFilter(Thinfinity_tlb::IFileSystemFilter** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileSystemFilter"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IFileSystemFilter**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IFileSystemFilterPtr __fastcall
IVirtualUIDispT<T>::get_FileSystemFilter(void)
{
  Thinfinity_tlb::IFileSystemFilterPtr Value;
  this->get_FileSystemFilter(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IVirtualUIDispT<T>::get_RegistryFilter(Thinfinity_tlb::IRegistryFilter** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegistryFilter"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IRegistryFilter**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IRegistryFilterPtr __fastcall
IVirtualUIDispT<T>::get_RegistryFilter(void)
{
  Thinfinity_tlb::IRegistryFilterPtr Value;
  this->get_RegistryFilter(&Value);
  return Value;
}

// *********************************************************************//
// DispIntf:  IEvents
// Flags:     (4096) Dispatchable
// GUID:      {1C5700BC-2317-4062-B614-0A4E286CFE68}
// *********************************************************************//
template <class T> void __fastcall
IEventsDispT<T>::OnGetUploadDir(BSTR* Directory/*[in,out]*/, VARIANT_BOOL* Handled/*[in,out]*/)
{
  _TDispID _dispid(/* OnGetUploadDir */ DISPID(101));
  TAutoArgs<2> _args;
  _args[1] = Directory /*[VT_BSTR:1]*/;
  _args[2] = Handled /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IEventsDispT<T>::OnBrowserResize(long* Width/*[in,out]*/, long* Height/*[in,out]*/, 
                                 VARIANT_BOOL* ResizeMaximized/*[in,out]*/)
{
  _TDispID _dispid(/* OnBrowserResize */ DISPID(102));
  TAutoArgs<3> _args;
  _args[1] = Width /*[VT_I4:1]*/;
  _args[2] = Height /*[VT_I4:1]*/;
  _args[3] = ResizeMaximized /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IEventsDispT<T>::OnClose()
{
  _TDispID _dispid(/* OnClose */ DISPID(103));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IEventsDispT<T>::OnReceiveMessage(BSTR Data/*[in]*/)
{
  _TDispID _dispid(/* OnReceiveMessage */ DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Data /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IEventsDispT<T>::OnDownloadEnd(BSTR Filename/*[in]*/)
{
  _TDispID _dispid(/* OnDownloadEnd */ DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = Filename /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> HRESULT __fastcall
IEventsDispT<T>::OnRecorderChanged()
{
  _TDispID _dispid(/* OnRecorderChanged */ DISPID(106));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIBrowserInfo
// Interface: IBrowserInfo
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_ViewWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_ViewWidth(Value);
}

template <class T> long __fastcall
TCOMIBrowserInfoT<T>::get_ViewWidth(void)
{
  long Value;
  OLECHECK(this->get_ViewWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::set_ViewWidth(long Value/*[in]*/)
{
  return (*this)->set_ViewWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_ViewHeight(long* Value/*[out,retval]*/)
{
  return (*this)->get_ViewHeight(Value);
}

template <class T> long __fastcall
TCOMIBrowserInfoT<T>::get_ViewHeight(void)
{
  long Value;
  OLECHECK(this->get_ViewHeight((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::set_ViewHeight(long Value/*[in]*/)
{
  return (*this)->set_ViewHeight(Value);
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_BrowserWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_BrowserWidth(Value);
}

template <class T> long __fastcall
TCOMIBrowserInfoT<T>::get_BrowserWidth(void)
{
  long Value;
  OLECHECK(this->get_BrowserWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_BrowserHeight(long* Value/*[out,retval]*/)
{
  return (*this)->get_BrowserHeight(Value);
}

template <class T> long __fastcall
TCOMIBrowserInfoT<T>::get_BrowserHeight(void)
{
  long Value;
  OLECHECK(this->get_BrowserHeight((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_ScreenWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_ScreenWidth(Value);
}

template <class T> long __fastcall
TCOMIBrowserInfoT<T>::get_ScreenWidth(void)
{
  long Value;
  OLECHECK(this->get_ScreenWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_ScreenHeight(long* Value/*[out,retval]*/)
{
  return (*this)->get_ScreenHeight(Value);
}

template <class T> long __fastcall
TCOMIBrowserInfoT<T>::get_ScreenHeight(void)
{
  long Value;
  OLECHECK(this->get_ScreenHeight((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_Username(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Username(Value);
}

template <class T> BSTR __fastcall
TCOMIBrowserInfoT<T>::get_Username(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Username((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_IPAddress(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_IPAddress(Value);
}

template <class T> BSTR __fastcall
TCOMIBrowserInfoT<T>::get_IPAddress(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_IPAddress((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_UserAgent(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_UserAgent(Value);
}

template <class T> BSTR __fastcall
TCOMIBrowserInfoT<T>::get_UserAgent(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_UserAgent((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_ScreenResolution(long* Value/*[out,retval]*/)
{
  return (*this)->get_ScreenResolution(Value);
}

template <class T> long __fastcall
TCOMIBrowserInfoT<T>::get_ScreenResolution(void)
{
  long Value;
  OLECHECK(this->get_ScreenResolution((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_Orientation(Thinfinity_tlb::Orientation* Value/*[out,retval]*/)
{
  return (*this)->get_Orientation(Value);
}

template <class T> Thinfinity_tlb::Orientation __fastcall
TCOMIBrowserInfoT<T>::get_Orientation(void)
{
  Thinfinity_tlb::Orientation Value;
  OLECHECK(this->get_Orientation((Thinfinity_tlb::Orientation*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_UniqueBrowserId(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_UniqueBrowserId(Value);
}

template <class T> BSTR __fastcall
TCOMIBrowserInfoT<T>::get_UniqueBrowserId(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_UniqueBrowserId((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::GetCookie(BSTR Name/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  return (*this)->GetCookie(Name, Value);
}

template <class T> BSTR __fastcall
TCOMIBrowserInfoT<T>::GetCookie(BSTR Name/*[in]*/)
{
  BSTR Value = 0;
  OLECHECK(this->GetCookie(Name/*[in]*/, (BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::SetCookie(BSTR Name/*[in]*/, BSTR Value/*[in]*/, BSTR Expires/*[in]*/)
{
  return (*this)->SetCookie(Name, Value, Expires);
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_Location(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Location(Value);
}

template <class T> BSTR __fastcall
TCOMIBrowserInfoT<T>::get_Location(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Location((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::get_CustomData(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_CustomData(Value);
}

template <class T> BSTR __fastcall
TCOMIBrowserInfoT<T>::get_CustomData(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_CustomData((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIBrowserInfoT<T>::set_CustomData(BSTR Value/*[in]*/)
{
  return (*this)->set_CustomData(Value);
}

// *********************************************************************//
// DispIntf:  IBrowserInfo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4D9F5347-460B-4275-BDF2-F2738E7F6757}
// *********************************************************************//
template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_ViewWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewWidth"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrowserInfoDispT<T>::get_ViewWidth(void)
{
  long Value;
  this->get_ViewWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::set_ViewWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewWidth"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_ViewHeight(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewHeight"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrowserInfoDispT<T>::get_ViewHeight(void)
{
  long Value;
  this->get_ViewHeight((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::set_ViewHeight(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewHeight"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_BrowserWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrowserWidth"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrowserInfoDispT<T>::get_BrowserWidth(void)
{
  long Value;
  this->get_BrowserWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_BrowserHeight(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BrowserHeight"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrowserInfoDispT<T>::get_BrowserHeight(void)
{
  long Value;
  this->get_BrowserHeight((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_ScreenWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenWidth"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrowserInfoDispT<T>::get_ScreenWidth(void)
{
  long Value;
  this->get_ScreenWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_ScreenHeight(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenHeight"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrowserInfoDispT<T>::get_ScreenHeight(void)
{
  long Value;
  this->get_ScreenHeight((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_Username(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Username"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrowserInfoDispT<T>::get_Username(void)
{
  BSTR Value;
  this->get_Username((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_IPAddress(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IPAddress"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrowserInfoDispT<T>::get_IPAddress(void)
{
  BSTR Value;
  this->get_IPAddress((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_UserAgent(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserAgent"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrowserInfoDispT<T>::get_UserAgent(void)
{
  BSTR Value;
  this->get_UserAgent((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_ScreenResolution(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScreenResolution"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IBrowserInfoDispT<T>::get_ScreenResolution(void)
{
  long Value;
  this->get_ScreenResolution((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_Orientation(Thinfinity_tlb::Orientation* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::Orientation __fastcall
IBrowserInfoDispT<T>::get_Orientation(void)
{
  Thinfinity_tlb::Orientation Value;
  this->get_Orientation((Thinfinity_tlb::Orientation*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_UniqueBrowserId(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueBrowserId"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrowserInfoDispT<T>::get_UniqueBrowserId(void)
{
  BSTR Value;
  this->get_UniqueBrowserId((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::GetCookie(BSTR Name/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCookie"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrowserInfoDispT<T>::GetCookie(BSTR Name/*[in]*/)
{
  BSTR Value;
  this->GetCookie(Name, (BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::SetCookie(BSTR Name/*[in]*/, BSTR Value/*[in]*/, BSTR Expires/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCookie"), DISPID(204));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  _args[3] = Expires /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_Location(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Location"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrowserInfoDispT<T>::get_Location(void)
{
  BSTR Value;
  this->get_Location((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::get_CustomData(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomData"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IBrowserInfoDispT<T>::get_CustomData(void)
{
  BSTR Value;
  this->get_CustomData((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IBrowserInfoDispT<T>::set_CustomData(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomData"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIDevServer
// Interface: IDevServer
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDevServerT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIDevServerT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDevServerT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIDevServerT<T>::get_Port(long* Value/*[out,retval]*/)
{
  return (*this)->get_Port(Value);
}

template <class T> long __fastcall
TCOMIDevServerT<T>::get_Port(void)
{
  long Value;
  OLECHECK(this->get_Port((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDevServerT<T>::set_Port(long Value/*[in]*/)
{
  return (*this)->set_Port(Value);
}

template <class T> HRESULT __fastcall
TCOMIDevServerT<T>::get_StartBrowser(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_StartBrowser(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIDevServerT<T>::get_StartBrowser(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_StartBrowser((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDevServerT<T>::set_StartBrowser(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_StartBrowser(Value);
}

// *********************************************************************//
// DispIntf:  IDevServer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B3EAC0CA-D7AB-4AB1-9E24-84A63C8C3F80}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDevServerDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDevServerDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDevServerDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDevServerDispT<T>::get_Port(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Port"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDevServerDispT<T>::get_Port(void)
{
  long Value;
  this->get_Port((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDevServerDispT<T>::set_Port(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Port"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDevServerDispT<T>::get_StartBrowser(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartBrowser"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IDevServerDispT<T>::get_StartBrowser(void)
{
  VARIANT_BOOL Value;
  this->get_StartBrowser((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDevServerDispT<T>::set_StartBrowser(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartBrowser"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIClientSettings
// Interface: IClientSettings
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIClientSettingsT<T>::get_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle* Value/*[out,retval]*/)
{
  return (*this)->get_MouseMoveGestureStyle(Value);
}

template <class T> Thinfinity_tlb::MouseMoveGestureStyle __fastcall
TCOMIClientSettingsT<T>::get_MouseMoveGestureStyle(void)
{
  Thinfinity_tlb::MouseMoveGestureStyle Value;
  OLECHECK(this->get_MouseMoveGestureStyle((Thinfinity_tlb::MouseMoveGestureStyle*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIClientSettingsT<T>::set_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle Value/*[in]*/)
{
  return (*this)->set_MouseMoveGestureStyle(Value);
}

template <class T> HRESULT __fastcall
TCOMIClientSettingsT<T>::get_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction* Value/*[out,retval]*/)
{
  return (*this)->get_MouseMoveGestureAction(Value);
}

template <class T> Thinfinity_tlb::MouseMoveGestureAction __fastcall
TCOMIClientSettingsT<T>::get_MouseMoveGestureAction(void)
{
  Thinfinity_tlb::MouseMoveGestureAction Value;
  OLECHECK(this->get_MouseMoveGestureAction((Thinfinity_tlb::MouseMoveGestureAction*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIClientSettingsT<T>::set_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction Value/*[in]*/)
{
  return (*this)->set_MouseMoveGestureAction(Value);
}

template <class T> HRESULT __fastcall
TCOMIClientSettingsT<T>::get_CursorVisible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_CursorVisible(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIClientSettingsT<T>::get_CursorVisible(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_CursorVisible((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIClientSettingsT<T>::set_CursorVisible(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_CursorVisible(Value);
}

// *********************************************************************//
// DispIntf:  IClientSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {439624CA-ED33-47BE-9211-91290F29584A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IClientSettingsDispT<T>::get_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseMoveGestureStyle"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::MouseMoveGestureStyle __fastcall
IClientSettingsDispT<T>::get_MouseMoveGestureStyle(void)
{
  Thinfinity_tlb::MouseMoveGestureStyle Value;
  this->get_MouseMoveGestureStyle((Thinfinity_tlb::MouseMoveGestureStyle*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IClientSettingsDispT<T>::set_MouseMoveGestureStyle(Thinfinity_tlb::MouseMoveGestureStyle Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseMoveGestureStyle"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientSettingsDispT<T>::get_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseMoveGestureAction"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::MouseMoveGestureAction __fastcall
IClientSettingsDispT<T>::get_MouseMoveGestureAction(void)
{
  Thinfinity_tlb::MouseMoveGestureAction Value;
  this->get_MouseMoveGestureAction((Thinfinity_tlb::MouseMoveGestureAction*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IClientSettingsDispT<T>::set_MouseMoveGestureAction(Thinfinity_tlb::MouseMoveGestureAction Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseMoveGestureAction"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IClientSettingsDispT<T>::get_CursorVisible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorVisible"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IClientSettingsDispT<T>::get_CursorVisible(void)
{
  VARIANT_BOOL Value;
  this->get_CursorVisible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IClientSettingsDispT<T>::set_CursorVisible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorVisible"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSValue
// Interface: IJSValue
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/)
{
  return (*this)->get_DataType(Value);
}

template <class T> Thinfinity_tlb::IJSDataType __fastcall
TCOMIJSValueT<T>::get_DataType(void)
{
  Thinfinity_tlb::IJSDataType Value;
  OLECHECK(this->get_DataType((Thinfinity_tlb::IJSDataType*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/)
{
  return (*this)->set_DataType(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::get_RawValue(VARIANT* Value/*[out,retval]*/)
{
  return (*this)->get_RawValue(Value);
}

template <class T> VARIANT __fastcall
TCOMIJSValueT<T>::get_RawValue(void)
{
  VARIANT Value;
  OLECHECK(this->get_RawValue((VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::set_RawValue(VARIANT Value/*[in]*/)
{
  return (*this)->set_RawValue(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::get_AsString(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_AsString(Value);
}

template <class T> BSTR __fastcall
TCOMIJSValueT<T>::get_AsString(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_AsString((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::set_AsString(BSTR Value/*[in]*/)
{
  return (*this)->set_AsString(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::get_AsInt(long* Value/*[out,retval]*/)
{
  return (*this)->get_AsInt(Value);
}

template <class T> long __fastcall
TCOMIJSValueT<T>::get_AsInt(void)
{
  long Value;
  OLECHECK(this->get_AsInt((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::set_AsInt(long Value/*[in]*/)
{
  return (*this)->set_AsInt(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AsBool(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIJSValueT<T>::get_AsBool(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AsBool((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::set_AsBool(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AsBool(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::get_AsFloat(float* Value/*[out,retval]*/)
{
  return (*this)->get_AsFloat(Value);
}

template <class T> float __fastcall
TCOMIJSValueT<T>::get_AsFloat(void)
{
  float Value;
  OLECHECK(this->get_AsFloat((float*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::set_AsFloat(float Value/*[in]*/)
{
  return (*this)->set_AsFloat(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::get_AsJSON(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_AsJSON(Value);
}

template <class T> BSTR __fastcall
TCOMIJSValueT<T>::get_AsJSON(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_AsJSON((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSValueT<T>::set_AsJSON(BSTR Value/*[in]*/)
{
  return (*this)->set_AsJSON(Value);
}

// *********************************************************************//
// DispIntf:  IJSValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6DE2E6A0-3C3A-47DC-9A93-928135EDAC90}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSValueDispT<T>::get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSDataType __fastcall
IJSValueDispT<T>::get_DataType(void)
{
  Thinfinity_tlb::IJSDataType Value;
  this->get_DataType((Thinfinity_tlb::IJSDataType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::get_RawValue(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawValue"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IJSValueDispT<T>::get_RawValue(void)
{
  VARIANT Value;
  this->get_RawValue((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::set_RawValue(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawValue"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::get_AsString(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsString"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSValueDispT<T>::get_AsString(void)
{
  BSTR Value;
  this->get_AsString((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::set_AsString(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsString"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::get_AsInt(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsInt"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSValueDispT<T>::get_AsInt(void)
{
  long Value;
  this->get_AsInt((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::set_AsInt(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsInt"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsBool"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IJSValueDispT<T>::get_AsBool(void)
{
  VARIANT_BOOL Value;
  this->get_AsBool((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::set_AsBool(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsBool"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::get_AsFloat(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsFloat"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IJSValueDispT<T>::get_AsFloat(void)
{
  float Value;
  this->get_AsFloat((float*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::set_AsFloat(float Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsFloat"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::get_AsJSON(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsJSON"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSValueDispT<T>::get_AsJSON(void)
{
  BSTR Value;
  this->get_AsJSON((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSValueDispT<T>::set_AsJSON(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsJSON"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSNamedValue
// Interface: IJSNamedValue
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSNamedValueT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Name(Value);
}

template <class T> BSTR __fastcall
TCOMIJSNamedValueT<T>::get_Name(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Name((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSNamedValueT<T>::set_Name(BSTR Value/*[in]*/)
{
  return (*this)->set_Name(Value);
}

// *********************************************************************//
// DispIntf:  IJSNamedValue
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E492419B-00AC-4A91-9AE9-9A82B07E89AE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSNamedValueDispT<T>::get_Name(void)
{
  BSTR Value;
  this->get_Name((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::set_Name(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(301));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSDataType __fastcall
IJSNamedValueDispT<T>::get_DataType(void)
{
  Thinfinity_tlb::IJSDataType Value;
  this->get_DataType((Thinfinity_tlb::IJSDataType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::get_RawValue(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawValue"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IJSNamedValueDispT<T>::get_RawValue(void)
{
  VARIANT Value;
  this->get_RawValue((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::set_RawValue(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawValue"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::get_AsString(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsString"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSNamedValueDispT<T>::get_AsString(void)
{
  BSTR Value;
  this->get_AsString((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::set_AsString(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsString"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::get_AsInt(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsInt"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSNamedValueDispT<T>::get_AsInt(void)
{
  long Value;
  this->get_AsInt((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::set_AsInt(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsInt"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsBool"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IJSNamedValueDispT<T>::get_AsBool(void)
{
  VARIANT_BOOL Value;
  this->get_AsBool((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::set_AsBool(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsBool"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::get_AsFloat(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsFloat"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IJSNamedValueDispT<T>::get_AsFloat(void)
{
  float Value;
  this->get_AsFloat((float*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::set_AsFloat(float Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsFloat"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::get_AsJSON(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsJSON"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSNamedValueDispT<T>::get_AsJSON(void)
{
  BSTR Value;
  this->get_AsJSON((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSNamedValueDispT<T>::set_AsJSON(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsJSON"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSObject
// Interface: IJSObject
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::get_Id(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Id(Value);
}

template <class T> BSTR __fastcall
TCOMIJSObjectT<T>::get_Id(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Id((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::set_Id(BSTR Value/*[in]*/)
{
  return (*this)->set_Id(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::get_Properties(Thinfinity_tlb::IJSProperties** Value/*[out,retval]*/)
{
  return (*this)->get_Properties(Value);
}

template <class T> Thinfinity_tlb::IJSPropertiesPtr __fastcall
TCOMIJSObjectT<T>::get_Properties(void)
{
  Thinfinity_tlb::IJSPropertiesPtr Value;
  OLECHECK(this->get_Properties((Thinfinity_tlb::IJSPropertiesPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::get_Methods(Thinfinity_tlb::IJSMethods** Value/*[out,retval]*/)
{
  return (*this)->get_Methods(Value);
}

template <class T> Thinfinity_tlb::IJSMethodsPtr __fastcall
TCOMIJSObjectT<T>::get_Methods(void)
{
  Thinfinity_tlb::IJSMethodsPtr Value;
  OLECHECK(this->get_Methods((Thinfinity_tlb::IJSMethodsPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::get_Events(Thinfinity_tlb::IJSEvents** Value/*[out,retval]*/)
{
  return (*this)->get_Events(Value);
}

template <class T> Thinfinity_tlb::IJSEventsPtr __fastcall
TCOMIJSObjectT<T>::get_Events(void)
{
  Thinfinity_tlb::IJSEventsPtr Value;
  OLECHECK(this->get_Events((Thinfinity_tlb::IJSEventsPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::get_Objects(Thinfinity_tlb::IJSObjects** Value/*[out,retval]*/)
{
  return (*this)->get_Objects(Value);
}

template <class T> Thinfinity_tlb::IJSObjectsPtr __fastcall
TCOMIJSObjectT<T>::get_Objects(void)
{
  Thinfinity_tlb::IJSObjectsPtr Value;
  OLECHECK(this->get_Objects((Thinfinity_tlb::IJSObjectsPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::FireEvent(BSTR Name/*[in]*/, Thinfinity_tlb::IJSArguments* Arguments/*[in]*/)
{
  return (*this)->FireEvent(Name, Arguments);
}

template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::ApplyChanges(void)
{
  return (*this)->ApplyChanges();
}

template <class T> HRESULT __fastcall
TCOMIJSObjectT<T>::ApplyModel(void)
{
  return (*this)->ApplyModel();
}

// *********************************************************************//
// DispIntf:  IJSObject
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {59342310-79A7-4B14-8B63-6DF05609AE30}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSObjectDispT<T>::get_Id(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSObjectDispT<T>::get_Id(void)
{
  BSTR Value;
  this->get_Id((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSObjectDispT<T>::set_Id(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSObjectDispT<T>::get_Properties(Thinfinity_tlb::IJSProperties** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSProperties**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSPropertiesPtr __fastcall
IJSObjectDispT<T>::get_Properties(void)
{
  Thinfinity_tlb::IJSPropertiesPtr Value;
  this->get_Properties(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSObjectDispT<T>::get_Methods(Thinfinity_tlb::IJSMethods** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Methods"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSMethods**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSMethodsPtr __fastcall
IJSObjectDispT<T>::get_Methods(void)
{
  Thinfinity_tlb::IJSMethodsPtr Value;
  this->get_Methods(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSObjectDispT<T>::get_Events(Thinfinity_tlb::IJSEvents** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Events"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvents**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEventsPtr __fastcall
IJSObjectDispT<T>::get_Events(void)
{
  Thinfinity_tlb::IJSEventsPtr Value;
  this->get_Events(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSObjectDispT<T>::get_Objects(Thinfinity_tlb::IJSObjects** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Objects"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSObjects**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSObjectsPtr __fastcall
IJSObjectDispT<T>::get_Objects(void)
{
  Thinfinity_tlb::IJSObjectsPtr Value;
  this->get_Objects(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSObjectDispT<T>::FireEvent(BSTR Name/*[in]*/, Thinfinity_tlb::IJSArguments* Arguments/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FireEvent"), DISPID(206));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH)(Thinfinity_tlb::IJSArguments*)Arguments /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSObjectDispT<T>::ApplyChanges()
{
  _TDispID _dispid(*this, OLETEXT("ApplyChanges"), DISPID(207));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IJSObjectDispT<T>::ApplyModel()
{
  _TDispID _dispid(*this, OLETEXT("ApplyModel"), DISPID(208));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IJSObjectEvents
// Flags:     (4096) Dispatchable
// GUID:      {A3D640E8-CD18-4196-A1A2-C87C82B0F88B}
// *********************************************************************//
template <class T> void __fastcall
IJSObjectEventsDispT<T>::OnExecuteMethod(Thinfinity_tlb::IJSObject* Caller/*[in]*/, 
                                         Thinfinity_tlb::IJSMethod* Method/*[in]*/)
{
  _TDispID _dispid(/* OnExecuteMethod */ DISPID(101));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSObject*)Caller /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Thinfinity_tlb::IJSMethod*)Method /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IJSObjectEventsDispT<T>::OnPropertyChange(Thinfinity_tlb::IJSObject* Caller/*[in]*/, 
                                          Thinfinity_tlb::IJSProperty* Prop/*[in]*/)
{
  _TDispID _dispid(/* OnPropertyChange */ DISPID(102));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSObject*)Caller /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Thinfinity_tlb::IJSProperty*)Prop /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSObjects
// Interface: IJSObjects
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSObjectsT<T>::get_Count(long* Value/*[out,retval]*/)
{
  return (*this)->get_Count(Value);
}

template <class T> long __fastcall
TCOMIJSObjectsT<T>::get_Count(void)
{
  long Value;
  OLECHECK(this->get_Count((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSObjectsT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Thinfinity_tlb::IJSObject** Value/*[out,retval]*/)
{
  return (*this)->get_Item(Index, Value);
}

template <class T> Thinfinity_tlb::IJSObject* __fastcall
TCOMIJSObjectsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSObject* Value;
  OLECHECK(this->get_Item(Index/*[in]*/, (Thinfinity_tlb::IJSObject**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSObjectsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIJSObjectsT<T>::Add(BSTR Id/*[in]*/, Thinfinity_tlb::IJSObject** Value/*[out,retval]*/)
{
  return (*this)->Add(Id, Value);
}

template <class T> Thinfinity_tlb::IJSObject* __fastcall
TCOMIJSObjectsT<T>::Add(BSTR Id/*[in]*/)
{
  Thinfinity_tlb::IJSObject* Value;
  OLECHECK(this->Add(Id/*[in]*/, (Thinfinity_tlb::IJSObject**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSObjectsT<T>::Remove(Thinfinity_tlb::IJSObject* Item/*[in]*/)
{
  return (*this)->Remove(Item);
}

// *********************************************************************//
// DispIntf:  IJSObjects
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C2406011-568E-4EAC-B95C-EF29E4806B86}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSObjectsDispT<T>::get_Count(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSObjectsDispT<T>::get_Count(void)
{
  long Value;
  this->get_Count((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSObjectsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Thinfinity_tlb::IJSObject** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSObject**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSObject* __fastcall
IJSObjectsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSObject* Value;
  this->get_Item(Index, (Thinfinity_tlb::IJSObject**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSObjectsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(204));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IJSObjectsDispT<T>::Add(BSTR Id/*[in]*/, Thinfinity_tlb::IJSObject** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Id /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSObject**)Value /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSObject* __fastcall
IJSObjectsDispT<T>::Add(BSTR Id/*[in]*/)
{
  Thinfinity_tlb::IJSObject* Value;
  this->Add(Id, (Thinfinity_tlb::IJSObject**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSObjectsDispT<T>::Remove(Thinfinity_tlb::IJSObject* Item/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSObject*)Item /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSProperty
// Interface: IJSProperty
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSPropertyT<T>::get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIJSPropertyT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ReadOnly((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSPropertyT<T>::set_ReadOnly(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ReadOnly(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSPropertyT<T>::OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                           Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/)
{
  return (*this)->OnGet(Binding, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSProperty* __fastcall
TCOMIJSPropertyT<T>::OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/)
{
  Thinfinity_tlb::IJSProperty* OutRetVal;
  OLECHECK(this->OnGet(Binding/*[in]*/, (Thinfinity_tlb::IJSProperty**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSPropertyT<T>::OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                           Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/)
{
  return (*this)->OnSet(Binding, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSProperty* __fastcall
TCOMIJSPropertyT<T>::OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/)
{
  Thinfinity_tlb::IJSProperty* OutRetVal;
  OLECHECK(this->OnSet(Binding/*[in]*/, (Thinfinity_tlb::IJSProperty**)&OutRetVal));
  return OutRetVal;
}

// *********************************************************************//
// DispIntf:  IJSProperty
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1F95C0E9-E7BF-48C9-AA35-88AD0149109B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_ReadOnly(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(401));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IJSPropertyDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL Value;
  this->get_ReadOnly((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_ReadOnly(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(401));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                           Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGet"), DISPID(402));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSBinding*)Binding /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSProperty**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSProperty* __fastcall
IJSPropertyDispT<T>::OnGet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/)
{
  Thinfinity_tlb::IJSProperty* OutRetVal;
  this->OnGet(Binding, (Thinfinity_tlb::IJSProperty**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/, 
                           Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnSet"), DISPID(403));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSBinding*)Binding /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSProperty**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSProperty* __fastcall
IJSPropertyDispT<T>::OnSet(Thinfinity_tlb::IJSBinding* Binding/*[in]*/)
{
  Thinfinity_tlb::IJSProperty* OutRetVal;
  this->OnSet(Binding, (Thinfinity_tlb::IJSProperty**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSPropertyDispT<T>::get_Name(void)
{
  BSTR Value;
  this->get_Name((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_Name(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(301));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSDataType __fastcall
IJSPropertyDispT<T>::get_DataType(void)
{
  Thinfinity_tlb::IJSDataType Value;
  this->get_DataType((Thinfinity_tlb::IJSDataType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_RawValue(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawValue"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IJSPropertyDispT<T>::get_RawValue(void)
{
  VARIANT Value;
  this->get_RawValue((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_RawValue(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawValue"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_AsString(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsString"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSPropertyDispT<T>::get_AsString(void)
{
  BSTR Value;
  this->get_AsString((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_AsString(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsString"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_AsInt(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsInt"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSPropertyDispT<T>::get_AsInt(void)
{
  long Value;
  this->get_AsInt((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_AsInt(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsInt"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsBool"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IJSPropertyDispT<T>::get_AsBool(void)
{
  VARIANT_BOOL Value;
  this->get_AsBool((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_AsBool(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsBool"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_AsFloat(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsFloat"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IJSPropertyDispT<T>::get_AsFloat(void)
{
  float Value;
  this->get_AsFloat((float*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_AsFloat(float Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsFloat"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::get_AsJSON(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsJSON"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSPropertyDispT<T>::get_AsJSON(void)
{
  BSTR Value;
  this->get_AsJSON((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertyDispT<T>::set_AsJSON(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsJSON"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSProperties
// Interface: IJSProperties
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSPropertiesT<T>::get_Count(long* Value/*[out,retval]*/)
{
  return (*this)->get_Count(Value);
}

template <class T> long __fastcall
TCOMIJSPropertiesT<T>::get_Count(void)
{
  long Value;
  OLECHECK(this->get_Count((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSPropertiesT<T>::get_Item(VARIANT Index/*[in]*/, 
                                Thinfinity_tlb::IJSProperty** Value/*[out,retval]*/)
{
  return (*this)->get_Item(Index, Value);
}

template <class T> Thinfinity_tlb::IJSProperty* __fastcall
TCOMIJSPropertiesT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSProperty* Value;
  OLECHECK(this->get_Item(Index/*[in]*/, (Thinfinity_tlb::IJSProperty**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSPropertiesT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIJSPropertiesT<T>::Add(BSTR Name/*[in]*/, 
                           Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/)
{
  return (*this)->Add(Name, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSProperty* __fastcall
TCOMIJSPropertiesT<T>::Add(BSTR Name/*[in]*/)
{
  Thinfinity_tlb::IJSProperty* OutRetVal;
  OLECHECK(this->Add(Name/*[in]*/, (Thinfinity_tlb::IJSProperty**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSPropertiesT<T>::Remove(Thinfinity_tlb::IJSProperty* Item/*[in]*/)
{
  return (*this)->Remove(Item);
}

// *********************************************************************//
// DispIntf:  IJSProperties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FCBB688F-8FB2-42C1-86FC-0AAF3B2A500C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSPropertiesDispT<T>::get_Count(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSPropertiesDispT<T>::get_Count(void)
{
  long Value;
  this->get_Count((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertiesDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                Thinfinity_tlb::IJSProperty** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSProperty**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSProperty* __fastcall
IJSPropertiesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSProperty* Value;
  this->get_Item(Index, (Thinfinity_tlb::IJSProperty**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSPropertiesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(204));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IJSPropertiesDispT<T>::Add(BSTR Name/*[in]*/, 
                           Thinfinity_tlb::IJSProperty** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSProperty**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSProperty* __fastcall
IJSPropertiesDispT<T>::Add(BSTR Name/*[in]*/)
{
  Thinfinity_tlb::IJSProperty* OutRetVal;
  this->Add(Name, (Thinfinity_tlb::IJSProperty**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSPropertiesDispT<T>::Remove(Thinfinity_tlb::IJSProperty* Item/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSProperty*)Item /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSArgument
// Interface: IJSArgument
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IJSArgument
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8F8C4462-D7B5-4696-BAD5-16DFAA6E2601}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSArgumentDispT<T>::get_Name(void)
{
  BSTR Value;
  this->get_Name((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::set_Name(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(301));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::get_DataType(Thinfinity_tlb::IJSDataType* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSDataType __fastcall
IJSArgumentDispT<T>::get_DataType(void)
{
  Thinfinity_tlb::IJSDataType Value;
  this->get_DataType((Thinfinity_tlb::IJSDataType*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::set_DataType(Thinfinity_tlb::IJSDataType Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataType"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::get_RawValue(VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawValue"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IJSArgumentDispT<T>::get_RawValue(void)
{
  VARIANT Value;
  this->get_RawValue((VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::set_RawValue(VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawValue"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::get_AsString(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsString"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSArgumentDispT<T>::get_AsString(void)
{
  BSTR Value;
  this->get_AsString((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::set_AsString(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsString"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::get_AsInt(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsInt"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSArgumentDispT<T>::get_AsInt(void)
{
  long Value;
  this->get_AsInt((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::set_AsInt(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsInt"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::get_AsBool(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsBool"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IJSArgumentDispT<T>::get_AsBool(void)
{
  VARIANT_BOOL Value;
  this->get_AsBool((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::set_AsBool(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsBool"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::get_AsFloat(float* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsFloat"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IJSArgumentDispT<T>::get_AsFloat(void)
{
  float Value;
  this->get_AsFloat((float*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::set_AsFloat(float Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsFloat"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::get_AsJSON(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsJSON"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSArgumentDispT<T>::get_AsJSON(void)
{
  BSTR Value;
  this->get_AsJSON((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentDispT<T>::set_AsJSON(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AsJSON"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSArguments
// Interface: IJSArguments
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSArgumentsT<T>::get_Count(long* Value/*[out,retval]*/)
{
  return (*this)->get_Count(Value);
}

template <class T> long __fastcall
TCOMIJSArgumentsT<T>::get_Count(void)
{
  long Value;
  OLECHECK(this->get_Count((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSArgumentsT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Thinfinity_tlb::IJSArgument** Value/*[out,retval]*/)
{
  return (*this)->get_Item(Index, Value);
}

template <class T> Thinfinity_tlb::IJSArgument* __fastcall
TCOMIJSArgumentsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSArgument* Value;
  OLECHECK(this->get_Item(Index/*[in]*/, (Thinfinity_tlb::IJSArgument**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSArgumentsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIJSArgumentsT<T>::Add(BSTR Name/*[in]*/, Thinfinity_tlb::IJSArgument** OutRetVal/*[out,retval]*/)
{
  return (*this)->Add(Name, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSArgument* __fastcall
TCOMIJSArgumentsT<T>::Add(BSTR Name/*[in]*/)
{
  Thinfinity_tlb::IJSArgument* OutRetVal;
  OLECHECK(this->Add(Name/*[in]*/, (Thinfinity_tlb::IJSArgument**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSArgumentsT<T>::Remove(Thinfinity_tlb::IJSArgument* Item/*[in]*/)
{
  return (*this)->Remove(Item);
}

// *********************************************************************//
// DispIntf:  IJSArguments
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FC097EF5-6D8A-4C80-A2AD-382FDC75E901}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSArgumentsDispT<T>::get_Count(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSArgumentsDispT<T>::get_Count(void)
{
  long Value;
  this->get_Count((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                               Thinfinity_tlb::IJSArgument** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSArgument**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSArgument* __fastcall
IJSArgumentsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSArgument* Value;
  this->get_Item(Index, (Thinfinity_tlb::IJSArgument**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSArgumentsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(204));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IJSArgumentsDispT<T>::Add(BSTR Name/*[in]*/, Thinfinity_tlb::IJSArgument** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSArgument**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSArgument* __fastcall
IJSArgumentsDispT<T>::Add(BSTR Name/*[in]*/)
{
  Thinfinity_tlb::IJSArgument* OutRetVal;
  this->Add(Name, (Thinfinity_tlb::IJSArgument**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSArgumentsDispT<T>::Remove(Thinfinity_tlb::IJSArgument* Item/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSArgument*)Item /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSMethod
// Interface: IJSMethod
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSMethodT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Name(Value);
}

template <class T> BSTR __fastcall
TCOMIJSMethodT<T>::get_Name(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Name((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSMethodT<T>::set_Name(BSTR Value/*[in]*/)
{
  return (*this)->set_Name(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSMethodT<T>::get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/)
{
  return (*this)->get_Arguments(Value);
}

template <class T> Thinfinity_tlb::IJSArgumentsPtr __fastcall
TCOMIJSMethodT<T>::get_Arguments(void)
{
  Thinfinity_tlb::IJSArgumentsPtr Value;
  OLECHECK(this->get_Arguments((Thinfinity_tlb::IJSArgumentsPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSMethodT<T>::get_ReturnValue(Thinfinity_tlb::IJSValue** Value/*[out,retval]*/)
{
  return (*this)->get_ReturnValue(Value);
}

template <class T> Thinfinity_tlb::IJSValuePtr __fastcall
TCOMIJSMethodT<T>::get_ReturnValue(void)
{
  Thinfinity_tlb::IJSValuePtr Value;
  OLECHECK(this->get_ReturnValue((Thinfinity_tlb::IJSValuePtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSMethodT<T>::AddArgument(BSTR Name/*[in]*/, Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                               Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/)
{
  return (*this)->AddArgument(Name, DataType, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSMethod* __fastcall
TCOMIJSMethodT<T>::AddArgument(BSTR Name/*[in]*/, Thinfinity_tlb::IJSDataType DataType/*[in]*/)
{
  Thinfinity_tlb::IJSMethod* OutRetVal;
  OLECHECK(this->AddArgument(Name/*[in]*/, DataType/*[in]*/, (Thinfinity_tlb::IJSMethod**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSMethodT<T>::OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/, 
                          Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/)
{
  return (*this)->OnCall(Callback, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSMethod* __fastcall
TCOMIJSMethodT<T>::OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/)
{
  Thinfinity_tlb::IJSMethod* OutRetVal;
  OLECHECK(this->OnCall(Callback/*[in]*/, (Thinfinity_tlb::IJSMethod**)&OutRetVal));
  return OutRetVal;
}

// *********************************************************************//
// DispIntf:  IJSMethod
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C45D6A8F-AD4A-47BB-AC3A-C125D6D5D27E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSMethodDispT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSMethodDispT<T>::get_Name(void)
{
  BSTR Value;
  this->get_Name((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSMethodDispT<T>::set_Name(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSMethodDispT<T>::get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Arguments"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSArguments**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSArgumentsPtr __fastcall
IJSMethodDispT<T>::get_Arguments(void)
{
  Thinfinity_tlb::IJSArgumentsPtr Value;
  this->get_Arguments(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSMethodDispT<T>::get_ReturnValue(Thinfinity_tlb::IJSValue** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReturnValue"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSValue**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSValuePtr __fastcall
IJSMethodDispT<T>::get_ReturnValue(void)
{
  Thinfinity_tlb::IJSValuePtr Value;
  this->get_ReturnValue(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSMethodDispT<T>::AddArgument(BSTR Name/*[in]*/, Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                               Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddArgument"), DISPID(204));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)DataType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSMethod**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSMethod* __fastcall
IJSMethodDispT<T>::AddArgument(BSTR Name/*[in]*/, Thinfinity_tlb::IJSDataType DataType/*[in]*/)
{
  Thinfinity_tlb::IJSMethod* OutRetVal;
  this->AddArgument(Name, DataType, (Thinfinity_tlb::IJSMethod**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSMethodDispT<T>::OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/, 
                          Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnCall"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSCallback*)Callback /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSMethod**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSMethod* __fastcall
IJSMethodDispT<T>::OnCall(Thinfinity_tlb::IJSCallback* Callback/*[in]*/)
{
  Thinfinity_tlb::IJSMethod* OutRetVal;
  this->OnCall(Callback, (Thinfinity_tlb::IJSMethod**)&OutRetVal);
  return OutRetVal;
}

// *********************************************************************//
// SmartIntf: TCOMIJSMethods
// Interface: IJSMethods
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSMethodsT<T>::get_Count(long* Value/*[out,retval]*/)
{
  return (*this)->get_Count(Value);
}

template <class T> long __fastcall
TCOMIJSMethodsT<T>::get_Count(void)
{
  long Value;
  OLECHECK(this->get_Count((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSMethodsT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Thinfinity_tlb::IJSMethod** Value/*[out,retval]*/)
{
  return (*this)->get_Item(Index, Value);
}

template <class T> Thinfinity_tlb::IJSMethod* __fastcall
TCOMIJSMethodsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSMethod* Value;
  OLECHECK(this->get_Item(Index/*[in]*/, (Thinfinity_tlb::IJSMethod**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSMethodsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIJSMethodsT<T>::Add(BSTR Name/*[in]*/, Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/)
{
  return (*this)->Add(Name, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSMethod* __fastcall
TCOMIJSMethodsT<T>::Add(BSTR Name/*[in]*/)
{
  Thinfinity_tlb::IJSMethod* OutRetVal;
  OLECHECK(this->Add(Name/*[in]*/, (Thinfinity_tlb::IJSMethod**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSMethodsT<T>::Remove(Thinfinity_tlb::IJSMethod* Item/*[in]*/)
{
  return (*this)->Remove(Item);
}

// *********************************************************************//
// DispIntf:  IJSMethods
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E4CB461F-586E-4121-ABD7-345B87BC423A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSMethodsDispT<T>::get_Count(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSMethodsDispT<T>::get_Count(void)
{
  long Value;
  this->get_Count((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSMethodsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                             Thinfinity_tlb::IJSMethod** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSMethod**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSMethod* __fastcall
IJSMethodsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSMethod* Value;
  this->get_Item(Index, (Thinfinity_tlb::IJSMethod**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSMethodsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(204));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IJSMethodsDispT<T>::Add(BSTR Name/*[in]*/, Thinfinity_tlb::IJSMethod** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSMethod**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSMethod* __fastcall
IJSMethodsDispT<T>::Add(BSTR Name/*[in]*/)
{
  Thinfinity_tlb::IJSMethod* OutRetVal;
  this->Add(Name, (Thinfinity_tlb::IJSMethod**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSMethodsDispT<T>::Remove(Thinfinity_tlb::IJSMethod* Item/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSMethod*)Item /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIJSEvent
// Interface: IJSEvent
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Name(Value);
}

template <class T> BSTR __fastcall
TCOMIJSEventT<T>::get_Name(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Name((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::set_Name(BSTR Value/*[in]*/)
{
  return (*this)->set_Name(Value);
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/)
{
  return (*this)->get_Arguments(Value);
}

template <class T> Thinfinity_tlb::IJSArgumentsPtr __fastcall
TCOMIJSEventT<T>::get_Arguments(void)
{
  Thinfinity_tlb::IJSArgumentsPtr Value;
  OLECHECK(this->get_Arguments((Thinfinity_tlb::IJSArgumentsPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::AddArgument(BSTR Name/*[in]*/, Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                              Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  return (*this)->AddArgument(Name, DataType, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventT<T>::AddArgument(BSTR Name/*[in]*/, Thinfinity_tlb::IJSDataType DataType/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  OLECHECK(this->AddArgument(Name/*[in]*/, DataType/*[in]*/, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::ArgumentAsNull(VARIANT Index/*[in]*/, 
                                 Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  return (*this)->ArgumentAsNull(Index, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventT<T>::ArgumentAsNull(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  OLECHECK(this->ArgumentAsNull(Index/*[in]*/, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                   Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  return (*this)->ArgumentAsString(Index, Value, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventT<T>::ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  OLECHECK(this->ArgumentAsString(Index/*[in]*/, Value/*[in]*/, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/, 
                                Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  return (*this)->ArgumentAsInt(Index, Value, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventT<T>::ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  OLECHECK(this->ArgumentAsInt(Index/*[in]*/, Value/*[in]*/, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::ArgumentAsBool(VARIANT Index/*[in]*/, VARIANT_BOOL Value/*[in]*/, 
                                 Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  return (*this)->ArgumentAsBool(Index, Value, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventT<T>::ArgumentAsBool(VARIANT Index/*[in]*/, VARIANT_BOOL Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  OLECHECK(this->ArgumentAsBool(Index/*[in]*/, Value/*[in]*/, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/, 
                                  Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  return (*this)->ArgumentAsFloat(Index, Value, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventT<T>::ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  OLECHECK(this->ArgumentAsFloat(Index/*[in]*/, Value/*[in]*/, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                 Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  return (*this)->ArgumentAsJSON(Index, Value, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventT<T>::ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  OLECHECK(this->ArgumentAsJSON(Index/*[in]*/, Value/*[in]*/, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSEventT<T>::Fire(void)
{
  return (*this)->Fire();
}

// *********************************************************************//
// DispIntf:  IJSEvent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8B66EACD-9619-43CF-9196-DCDA17F5500E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSEventDispT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IJSEventDispT<T>::get_Name(void)
{
  BSTR Value;
  this->get_Name((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::set_Name(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::get_Arguments(Thinfinity_tlb::IJSArguments** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Arguments"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSArguments**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSArgumentsPtr __fastcall
IJSEventDispT<T>::get_Arguments(void)
{
  Thinfinity_tlb::IJSArgumentsPtr Value;
  this->get_Arguments(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::AddArgument(BSTR Name/*[in]*/, Thinfinity_tlb::IJSDataType DataType/*[in]*/, 
                              Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddArgument"), DISPID(203));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)DataType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventDispT<T>::AddArgument(BSTR Name/*[in]*/, Thinfinity_tlb::IJSDataType DataType/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  this->AddArgument(Name, DataType, (Thinfinity_tlb::IJSEvent**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::ArgumentAsNull(VARIANT Index/*[in]*/, 
                                 Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ArgumentAsNull"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventDispT<T>::ArgumentAsNull(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  this->ArgumentAsNull(Index, (Thinfinity_tlb::IJSEvent**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                   Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ArgumentAsString"), DISPID(205));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventDispT<T>::ArgumentAsString(VARIANT Index/*[in]*/, BSTR Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  this->ArgumentAsString(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/, 
                                Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ArgumentAsInt"), DISPID(206));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = Value /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventDispT<T>::ArgumentAsInt(VARIANT Index/*[in]*/, long Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  this->ArgumentAsInt(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::ArgumentAsBool(VARIANT Index/*[in]*/, VARIANT_BOOL Value/*[in]*/, 
                                 Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ArgumentAsBool"), DISPID(207));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = Value /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventDispT<T>::ArgumentAsBool(VARIANT Index/*[in]*/, VARIANT_BOOL Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  this->ArgumentAsBool(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/, 
                                  Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ArgumentAsFloat"), DISPID(208));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = Value /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventDispT<T>::ArgumentAsFloat(VARIANT Index/*[in]*/, float Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  this->ArgumentAsFloat(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/, 
                                 Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ArgumentAsJSON"), DISPID(209));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventDispT<T>::ArgumentAsJSON(VARIANT Index/*[in]*/, BSTR Value/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  this->ArgumentAsJSON(Index, Value, (Thinfinity_tlb::IJSEvent**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSEventDispT<T>::Fire()
{
  _TDispID _dispid(*this, OLETEXT("Fire"), DISPID(210));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIJSEvents
// Interface: IJSEvents
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIJSEventsT<T>::get_Count(long* Value/*[out,retval]*/)
{
  return (*this)->get_Count(Value);
}

template <class T> long __fastcall
TCOMIJSEventsT<T>::get_Count(void)
{
  long Value;
  OLECHECK(this->get_Count((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSEventsT<T>::get_Item(VARIANT Index/*[in]*/, Thinfinity_tlb::IJSEvent** Value/*[out,retval]*/)
{
  return (*this)->get_Item(Index, Value);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventsT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* Value;
  OLECHECK(this->get_Item(Index/*[in]*/, (Thinfinity_tlb::IJSEvent**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIJSEventsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIJSEventsT<T>::Add(BSTR Name/*[in]*/, Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  return (*this)->Add(Name, OutRetVal);
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
TCOMIJSEventsT<T>::Add(BSTR Name/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  OLECHECK(this->Add(Name/*[in]*/, (Thinfinity_tlb::IJSEvent**)&OutRetVal));
  return OutRetVal;
}

template <class T> HRESULT __fastcall
TCOMIJSEventsT<T>::Remove(Thinfinity_tlb::IJSEvent* Item/*[in]*/)
{
  return (*this)->Remove(Item);
}

// *********************************************************************//
// DispIntf:  IJSEvents
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {6AE952B3-B6DA-4C81-80FF-D0A162E11D02}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSEventsDispT<T>::get_Count(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IJSEventsDispT<T>::get_Count(void)
{
  long Value;
  this->get_Count((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSEventsDispT<T>::get_Item(VARIANT Index/*[in]*/, Thinfinity_tlb::IJSEvent** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* Value;
  this->get_Item(Index, (Thinfinity_tlb::IJSEvent**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IJSEventsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(204));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IJSEventsDispT<T>::Add(BSTR Name/*[in]*/, Thinfinity_tlb::IJSEvent** OutRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IJSEvent**)OutRetVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Thinfinity_tlb::IJSEvent* __fastcall
IJSEventsDispT<T>::Add(BSTR Name/*[in]*/)
{
  Thinfinity_tlb::IJSEvent* OutRetVal;
  this->Add(Name, (Thinfinity_tlb::IJSEvent**)&OutRetVal);
  return OutRetVal;
}

template <class T> HRESULT __fastcall
IJSEventsDispT<T>::Remove(Thinfinity_tlb::IJSEvent* Item/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSEvent*)Item /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IJSBinding
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ACFC2953-37F1-479E-B405-D0BB75E156E6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSBindingDispT<T>::Set_(Thinfinity_tlb::IJSObject* Parent/*[in]*/, 
                         Thinfinity_tlb::IJSProperty* Prop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Set"), DISPID(201));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSObject*)Parent /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Thinfinity_tlb::IJSProperty*)Prop /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IJSCallback
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ADD570A0-491A-4E40-8120-57B4D1245FD3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IJSCallbackDispT<T>::Callback(Thinfinity_tlb::IJSObject* Parent/*[in]*/, 
                              Thinfinity_tlb::IJSMethod* Method/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callback"), DISPID(201));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Thinfinity_tlb::IJSObject*)Parent /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Thinfinity_tlb::IJSMethod*)Method /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIRecorder
// Interface: IRecorder
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::get_Filename(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Filename(Value);
}

template <class T> BSTR __fastcall
TCOMIRecorderT<T>::get_Filename(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Filename((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::set_Filename(BSTR Value/*[in]*/)
{
  return (*this)->set_Filename(Value);
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::Rec(BSTR Track/*[in]*/)
{
  return (*this)->Rec(Track);
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::Play(long From/*[in]*/, long To/*[in]*/)
{
  return (*this)->Play(From, To);
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::get_Position(long* Value/*[out,retval]*/)
{
  return (*this)->get_Position(Value);
}

template <class T> long __fastcall
TCOMIRecorderT<T>::get_Position(void)
{
  long Value;
  OLECHECK(this->get_Position((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::get_Count(long* Value/*[out,retval]*/)
{
  return (*this)->get_Count(Value);
}

template <class T> long __fastcall
TCOMIRecorderT<T>::get_Count(void)
{
  long Value;
  OLECHECK(this->get_Count((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::get_State(Thinfinity_tlb::RecorderState* Value/*[out,retval]*/)
{
  return (*this)->get_State(Value);
}

template <class T> Thinfinity_tlb::RecorderState __fastcall
TCOMIRecorderT<T>::get_State(void)
{
  Thinfinity_tlb::RecorderState Value;
  OLECHECK(this->get_State((Thinfinity_tlb::RecorderState*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::get_Options(unsigned_long* Value/*[out,retval]*/)
{
  return (*this)->get_Options(Value);
}

template <class T> unsigned_long __fastcall
TCOMIRecorderT<T>::get_Options(void)
{
  unsigned_long Value;
  OLECHECK(this->get_Options((unsigned_long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::set_Options(unsigned_long Value/*[in]*/)
{
  return (*this)->set_Options(Value);
}

template <class T> HRESULT __fastcall
TCOMIRecorderT<T>::get_Tracks(Thinfinity_tlb::IRecTracks** Value/*[out,retval]*/)
{
  return (*this)->get_Tracks(Value);
}

template <class T> Thinfinity_tlb::IRecTracksPtr __fastcall
TCOMIRecorderT<T>::get_Tracks(void)
{
  Thinfinity_tlb::IRecTracksPtr Value;
  OLECHECK(this->get_Tracks((Thinfinity_tlb::IRecTracksPtr*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IRecorder
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D89DA2B6-B7BF-4065-80F5-6D78B331C7DD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRecorderDispT<T>::get_Filename(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filename"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRecorderDispT<T>::get_Filename(void)
{
  BSTR Value;
  this->get_Filename((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::set_Filename(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filename"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::Rec(BSTR Track/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rec"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Track /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::Play(long From/*[in]*/, long To/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(204));
  TAutoArgs<2> _args;
  _args[1] = From /*[VT_I4:0]*/;
  _args[2] = To /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(205));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::get_Position(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRecorderDispT<T>::get_Position(void)
{
  long Value;
  this->get_Position((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::get_Count(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRecorderDispT<T>::get_Count(void)
{
  long Value;
  this->get_Count((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::get_State(Thinfinity_tlb::RecorderState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::RecorderState __fastcall
IRecorderDispT<T>::get_State(void)
{
  Thinfinity_tlb::RecorderState Value;
  this->get_State((Thinfinity_tlb::RecorderState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::get_Options(unsigned_long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IRecorderDispT<T>::get_Options(void)
{
  unsigned_long Value;
  this->get_Options((unsigned_long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::set_Options(unsigned_long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRecorderDispT<T>::get_Tracks(Thinfinity_tlb::IRecTracks** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracks"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IRecTracks**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IRecTracksPtr __fastcall
IRecorderDispT<T>::get_Tracks(void)
{
  Thinfinity_tlb::IRecTracksPtr Value;
  this->get_Tracks(&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIRecTrack
// Interface: IRecTrack
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRecTrackT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Name(Value);
}

template <class T> BSTR __fastcall
TCOMIRecTrackT<T>::get_Name(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Name((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRecTrackT<T>::get_Position(long* Value/*[out,retval]*/)
{
  return (*this)->get_Position(Value);
}

template <class T> long __fastcall
TCOMIRecTrackT<T>::get_Position(void)
{
  long Value;
  OLECHECK(this->get_Position((long*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IRecTrack
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D4744AE1-70CB-43DD-BEA5-A5310B2E24C6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRecTrackDispT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRecTrackDispT<T>::get_Name(void)
{
  BSTR Value;
  this->get_Name((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRecTrackDispT<T>::get_Position(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRecTrackDispT<T>::get_Position(void)
{
  long Value;
  this->get_Position((long*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIRecTracks
// Interface: IRecTracks
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRecTracksT<T>::get_Item(long Index/*[in]*/, Thinfinity_tlb::IRecTrack** Value/*[out,retval]*/)
{
  return (*this)->get_Item(Index, Value);
}

template <class T> Thinfinity_tlb::IRecTrack* __fastcall
TCOMIRecTracksT<T>::get_Item(long Index/*[in]*/)
{
  Thinfinity_tlb::IRecTrack* Value;
  OLECHECK(this->get_Item(Index/*[in]*/, (Thinfinity_tlb::IRecTrack**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRecTracksT<T>::get_Count(long* Value/*[out,retval]*/)
{
  return (*this)->get_Count(Value);
}

template <class T> long __fastcall
TCOMIRecTracksT<T>::get_Count(void)
{
  long Value;
  OLECHECK(this->get_Count((long*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IRecTracks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {AB45B615-9309-471E-A455-3FE93F88E674}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRecTracksDispT<T>::get_Item(long Index/*[in]*/, Thinfinity_tlb::IRecTrack** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Thinfinity_tlb::IRecTrack**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Thinfinity_tlb::IRecTrack* __fastcall
IRecTracksDispT<T>::get_Item(long Index/*[in]*/)
{
  Thinfinity_tlb::IRecTrack* Value;
  this->get_Item(Index, (Thinfinity_tlb::IRecTrack**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRecTracksDispT<T>::get_Count(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRecTracksDispT<T>::get_Count(void)
{
  long Value;
  this->get_Count((long*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIFileSystemFilter
// Interface: IFileSystemFilter
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIFileSystemFilterT<T>::get_User(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_User(Value);
}

template <class T> BSTR __fastcall
TCOMIFileSystemFilterT<T>::get_User(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_User((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIFileSystemFilterT<T>::set_User(BSTR Value/*[in]*/)
{
  return (*this)->set_User(Value);
}

template <class T> HRESULT __fastcall
TCOMIFileSystemFilterT<T>::get_CfgFile(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_CfgFile(Value);
}

template <class T> BSTR __fastcall
TCOMIFileSystemFilterT<T>::get_CfgFile(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_CfgFile((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIFileSystemFilterT<T>::set_CfgFile(BSTR Value/*[in]*/)
{
  return (*this)->set_CfgFile(Value);
}

template <class T> HRESULT __fastcall
TCOMIFileSystemFilterT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIFileSystemFilterT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIFileSystemFilterT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Active(Value);
}

// *********************************************************************//
// DispIntf:  IFileSystemFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3FE99D2F-0CFC-43D1-B762-0C7C15EB872E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IFileSystemFilterDispT<T>::get_User(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("User"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileSystemFilterDispT<T>::get_User(void)
{
  BSTR Value;
  this->get_User((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFileSystemFilterDispT<T>::set_User(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("User"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFileSystemFilterDispT<T>::get_CfgFile(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CfgFile"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFileSystemFilterDispT<T>::get_CfgFile(void)
{
  BSTR Value;
  this->get_CfgFile((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFileSystemFilterDispT<T>::set_CfgFile(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CfgFile"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IFileSystemFilterDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFileSystemFilterDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IFileSystemFilterDispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIRegistryFilter
// Interface: IRegistryFilter
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRegistryFilterT<T>::get_User(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_User(Value);
}

template <class T> BSTR __fastcall
TCOMIRegistryFilterT<T>::get_User(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_User((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRegistryFilterT<T>::set_User(BSTR Value/*[in]*/)
{
  return (*this)->set_User(Value);
}

template <class T> HRESULT __fastcall
TCOMIRegistryFilterT<T>::get_CfgFile(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_CfgFile(Value);
}

template <class T> BSTR __fastcall
TCOMIRegistryFilterT<T>::get_CfgFile(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_CfgFile((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRegistryFilterT<T>::set_CfgFile(BSTR Value/*[in]*/)
{
  return (*this)->set_CfgFile(Value);
}

template <class T> HRESULT __fastcall
TCOMIRegistryFilterT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIRegistryFilterT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRegistryFilterT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Active(Value);
}

// *********************************************************************//
// DispIntf:  IRegistryFilter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4834F840-915B-488B-ADEA-98890A04CEE6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRegistryFilterDispT<T>::get_User(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("User"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRegistryFilterDispT<T>::get_User(void)
{
  BSTR Value;
  this->get_User((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRegistryFilterDispT<T>::set_User(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("User"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRegistryFilterDispT<T>::get_CfgFile(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CfgFile"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IRegistryFilterDispT<T>::get_CfgFile(void)
{
  BSTR Value;
  this->get_CfgFile((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRegistryFilterDispT<T>::set_CfgFile(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CfgFile"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRegistryFilterDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRegistryFilterDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRegistryFilterDispT<T>::set_Active(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : VirtualUI
// Interface: TCOMIVirtualUI
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIVirtualUI, IVirtualUI, &CLSID_VirtualUI, &IID_IVirtualUI> CoVirtualUI;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : BrowserInfo
// Interface: TCOMIBrowserInfo
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIBrowserInfo, IBrowserInfo, &CLSID_BrowserInfo, &IID_IBrowserInfo> CoBrowserInfo;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DevServer
// Interface: TCOMIDevServer
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDevServer, IDevServer, &CLSID_DevServer, &IID_IDevServer> CoDevServer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ClientSettings
// Interface: TCOMIClientSettings
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIClientSettings, IClientSettings, &CLSID_ClientSettings, &IID_IClientSettings> CoClientSettings;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSValue
// Interface: TCOMIJSValue
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSValue, IJSValue, &CLSID_JSValue, &IID_IJSValue> CoJSValue;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSNamedValue
// Interface: TCOMIJSNamedValue
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSNamedValue, IJSNamedValue, &CLSID_JSNamedValue, &IID_IJSNamedValue> CoJSNamedValue;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSObject
// Interface: TCOMIJSObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSObject, IJSObject, &CLSID_JSObject, &IID_IJSObject> CoJSObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSObjects
// Interface: TCOMIJSObjects
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSObjects, IJSObjects, &CLSID_JSObjects, &IID_IJSObjects> CoJSObjects;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSProperty
// Interface: TCOMIJSProperty
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSProperty, IJSProperty, &CLSID_JSProperty, &IID_IJSProperty> CoJSProperty;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSProperties
// Interface: TCOMIJSProperties
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSProperties, IJSProperties, &CLSID_JSProperties, &IID_IJSProperties> CoJSProperties;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSArgument
// Interface: TCOMIJSArgument
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSArgument, IJSArgument, &CLSID_JSArgument, &IID_IJSArgument> CoJSArgument;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSArguments
// Interface: TCOMIJSArguments
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSArguments, IJSArguments, &CLSID_JSArguments, &IID_IJSArguments> CoJSArguments;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSMethod
// Interface: TCOMIJSMethod
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSMethod, IJSMethod, &CLSID_JSMethod, &IID_IJSMethod> CoJSMethod;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSMethods
// Interface: TCOMIJSMethods
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSMethods, IJSMethods, &CLSID_JSMethods, &IID_IJSMethods> CoJSMethods;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSEvent
// Interface: TCOMIJSEvent
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSEvent, IJSEvent, &CLSID_JSEvent, &IID_IJSEvent> CoJSEvent;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : JSEvents
// Interface: TCOMIJSEvents
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIJSEvents, IJSEvents, &CLSID_JSEvents, &IID_IJSEvents> CoJSEvents;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Recorder
// Interface: TCOMIRecorder
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRecorder, IRecorder, &CLSID_Recorder, &IID_IRecorder> CoRecorder;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RecTrack
// Interface: TCOMIRecTrack
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRecTrack, IRecTrack, &CLSID_RecTrack, &IID_IRecTrack> CoRecTrack;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RecTracks
// Interface: TCOMIRecTracks
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRecTracks, IRecTracks, &CLSID_RecTracks, &IID_IRecTracks> CoRecTracks;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : FileSystemFilter
// Interface: TCOMIFileSystemFilter
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIFileSystemFilter, IFileSystemFilter, &CLSID_FileSystemFilter, &IID_IFileSystemFilter> CoFileSystemFilter;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RegistryFilter
// Interface: TCOMIRegistryFilter
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRegistryFilter, IRegistryFilter, &CLSID_RegistryFilter, &IID_IRegistryFilter> CoRegistryFilter;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : VirtualUI
// Event Interface : IEvents
// *********************************************************************//
template <class T>
class TEvents_VirtualUI : public IConnectionPointImpl<T,
                                                 &DIID_IEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnGetUploadDir(BSTR* Directory, VARIANT_BOOL* Handled);
  void            Fire_OnBrowserResize(long* Width, long* Height, VARIANT_BOOL* ResizeMaximized);
  void            Fire_OnClose(void);
  void            Fire_OnReceiveMessage(BSTR Data);
  void            Fire_OnDownloadEnd(BSTR Filename);
  HRESULT         Fire_OnRecorderChanged(void);
protected:
  IEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_VirtualUI<T>::Fire_OnGetUploadDir(BSTR* Directory, VARIANT_BOOL* Handled)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnGetUploadDir(Directory, Handled);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VirtualUI<T>::Fire_OnBrowserResize(long* Width, long* Height, VARIANT_BOOL* ResizeMaximized)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBrowserResize(Width, Height, ResizeMaximized);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VirtualUI<T>::Fire_OnClose(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClose();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VirtualUI<T>::Fire_OnReceiveMessage(BSTR Data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceiveMessage(Data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VirtualUI<T>::Fire_OnDownloadEnd(BSTR Filename)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDownloadEnd(Filename);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_VirtualUI<T>::Fire_OnRecorderChanged(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRecorderChanged();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : JSObject
// Event Interface : IJSObjectEvents
// *********************************************************************//
template <class T>
class TEvents_JSObject : public IConnectionPointImpl<T,
                                                 &DIID_IJSObjectEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnExecuteMethod(Thinfinity_tlb::IJSObject* Caller, 
                                       Thinfinity_tlb::IJSMethod* Method);
  void            Fire_OnPropertyChange(Thinfinity_tlb::IJSObject* Caller, 
                                        Thinfinity_tlb::IJSProperty* Prop);
protected:
  IJSObjectEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_JSObject<T>::Fire_OnExecuteMethod(Thinfinity_tlb::IJSObject* Caller, 
                                          Thinfinity_tlb::IJSMethod* Method)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnExecuteMethod(Caller, Method);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_JSObject<T>::Fire_OnPropertyChange(Thinfinity_tlb::IJSObject* Caller, 
                                           Thinfinity_tlb::IJSProperty* Prop)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPropertyChange(Caller, Prop);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : VirtualUI
// Event Interface : IEvents
// *********************************************************************//
template <typename T>
class IVirtualUI_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnGetUploadDir(BSTR* Directory, VARIANT_BOOL* Handled)
  {
    IEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnGetUploadDir(Directory, Handled);
      }
    }
  }

  void Fire_OnBrowserResize(long* Width, long* Height, VARIANT_BOOL* ResizeMaximized)
  {
    IEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnBrowserResize(Width, Height, ResizeMaximized);
      }
    }
  }

  void Fire_OnClose(void)
  {
    IEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnClose();
      }
    }
  }

  void Fire_OnReceiveMessage(BSTR Data)
  {
    IEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnReceiveMessage(Data);
      }
    }
  }

  void Fire_OnDownloadEnd(BSTR Filename)
  {
    IEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDownloadEnd(Filename);
      }
    }
  }

  HRESULT Fire_OnRecorderChanged(void)
  {
    IEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRecorderChanged();
      }
    }
    return S_OK;
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : JSObject
// Event Interface : IJSObjectEvents
// *********************************************************************//
template <typename T>
class IJSObject_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnExecuteMethod(Thinfinity_tlb::IJSObject* Caller, Thinfinity_tlb::IJSMethod* Method)
  {
    IJSObjectEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnExecuteMethod(Caller, Method);
      }
    }
  }

  void Fire_OnPropertyChange(Thinfinity_tlb::IJSObject* Caller, Thinfinity_tlb::IJSProperty* Prop)
  {
    IJSObjectEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnPropertyChange(Caller, Prop);
      }
    }
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Thinfinity_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Thinfinity_tlb;
#endif

#pragma option pop

#endif // Thinfinity_TLBH
